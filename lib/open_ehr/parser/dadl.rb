# Autogenerated from a Treetop grammar. Edits may be lost.


require 'shared_token'

module DADL
  include Treetop::Runtime

  def root
    @root ||= :V_DADL_TEXT
  end

  include SharedToken

  def _nt_V_DADL_TEXT
    start_index = index
    if node_cache[:V_DADL_TEXT].has_key?(index)
      cached = node_cache[:V_DADL_TEXT][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_attr_vals
    if r1
      r0 = r1
    else
      r2 = _nt_complex_object_block
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:V_DADL_TEXT][start_index] = r0

    r0
  end

  module AttrVals0
    def attr_val
      elements[1]
    end
  end

  module AttrVals1
    def attr_val
      elements[0]
    end

  end

  def _nt_attr_vals
    start_index = index
    if node_cache[:attr_vals].has_key?(index)
      cached = node_cache[:attr_vals][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_attr_val
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        if has_terminal?(';', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(';')
          r5 = nil
        end
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          r6 = _nt_attr_val
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(AttrVals0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(AttrVals1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:attr_vals][start_index] = r0

    r0
  end

  module AttrVal0
    def attr_id
      elements[0]
    end

    def SYM_EQ
      elements[1]
    end

    def object_block
      elements[2]
    end
  end

  def _nt_attr_val
    start_index = index
    if node_cache[:attr_val].has_key?(index)
      cached = node_cache[:attr_val][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_attr_id
    s0 << r1
    if r1
      r2 = _nt_SYM_EQ
      s0 << r2
      if r2
        r3 = _nt_object_block
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(AttrVal0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:attr_val][start_index] = r0

    r0
  end

  module AttrId0
    def V_ATTRIBUTE_IDENTIFIER
      elements[0]
    end

    def white_space
      elements[1]
    end
  end

  def _nt_attr_id
    start_index = index
    if node_cache[:attr_id].has_key?(index)
      cached = node_cache[:attr_id][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_V_ATTRIBUTE_IDENTIFIER
    s0 << r1
    if r1
      r2 = _nt_white_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(AttrId0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:attr_id][start_index] = r0

    r0
  end

  def _nt_object_block
    start_index = index
    if node_cache[:object_block].has_key?(index)
      cached = node_cache[:object_block][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_complex_object_block
    if r1
      r0 = r1
    else
      r2 = _nt_primitive_object_block
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:object_block][start_index] = r0

    r0
  end

  def _nt_complex_object_block
    start_index = index
    if node_cache[:complex_object_block].has_key?(index)
      cached = node_cache[:complex_object_block][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_single_attr_object_block
    if r1
      r0 = r1
    else
      r2 = _nt_multiple_attr_object_block
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:complex_object_block][start_index] = r0

    r0
  end

  module MultipleAttrObjectBlock0
    def untyped_multiple_attr_object_block
      elements[1]
    end
  end

  def _nt_multiple_attr_object_block
    start_index = index
    if node_cache[:multiple_attr_object_block].has_key?(index)
      cached = node_cache[:multiple_attr_object_block][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_type_identifier
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r3 = _nt_untyped_multiple_attr_object_block
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(MultipleAttrObjectBlock0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:multiple_attr_object_block][start_index] = r0

    r0
  end

  module UntypedMultipleAttrObjectBlock0
    def multiple_attr_object_block_head
      elements[0]
    end

    def keyed_objects
      elements[1]
    end

    def SYM_END_DBLOCK
      elements[2]
    end
  end

  def _nt_untyped_multiple_attr_object_block
    start_index = index
    if node_cache[:untyped_multiple_attr_object_block].has_key?(index)
      cached = node_cache[:untyped_multiple_attr_object_block][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_multiple_attr_object_block_head
    s0 << r1
    if r1
      r2 = _nt_keyed_objects
      s0 << r2
      if r2
        r3 = _nt_SYM_END_DBLOCK
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(UntypedMultipleAttrObjectBlock0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:untyped_multiple_attr_object_block][start_index] = r0

    r0
  end

  def _nt_multiple_attr_object_block_head
    start_index = index
    if node_cache[:multiple_attr_object_block_head].has_key?(index)
      cached = node_cache[:multiple_attr_object_block_head][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_SYM_START_DBLOCK

    node_cache[:multiple_attr_object_block_head][start_index] = r0

    r0
  end

  def _nt_keyed_objects
    start_index = index
    if node_cache[:keyed_objects].has_key?(index)
      cached = node_cache[:keyed_objects][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_keyed_object
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:keyed_objects][start_index] = r0

    r0
  end

  module KeyedObject0
    def object_key
      elements[0]
    end

    def SYM_EQ
      elements[1]
    end

    def object_block
      elements[2]
    end
  end

  def _nt_keyed_object
    start_index = index
    if node_cache[:keyed_object].has_key?(index)
      cached = node_cache[:keyed_object][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_object_key
    s0 << r1
    if r1
      r2 = _nt_SYM_EQ
      s0 << r2
      if r2
        r3 = _nt_object_block
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(KeyedObject0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:keyed_object][start_index] = r0

    r0
  end

  module ObjectKey0
    def simple_value
      elements[1]
    end

    def white_space
      elements[3]
    end
  end

  def _nt_object_key
    start_index = index
    if node_cache[:object_key].has_key?(index)
      cached = node_cache[:object_key][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('[', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_simple_value
      s0 << r2
      if r2
        if has_terminal?(']', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(']')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_white_space
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ObjectKey0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:object_key][start_index] = r0

    r0
  end

  module SingleAttrObjectBlock0
    def untyped_single_attr_object_block
      elements[1]
    end
  end

  def _nt_single_attr_object_block
    start_index = index
    if node_cache[:single_attr_object_block].has_key?(index)
      cached = node_cache[:single_attr_object_block][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_type_identifier
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r3 = _nt_untyped_single_attr_object_block
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SingleAttrObjectBlock0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:single_attr_object_block][start_index] = r0

    r0
  end

  module UntypedSingleAttrObjectBlock0
    def single_attr_object_complex_head
      elements[0]
    end

    def SYM_END_DBLOCK
      elements[2]
    end
  end

  def _nt_untyped_single_attr_object_block
    start_index = index
    if node_cache[:untyped_single_attr_object_block].has_key?(index)
      cached = node_cache[:untyped_single_attr_object_block][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_single_attr_object_complex_head
    s0 << r1
    if r1
      r3 = _nt_attr_vals
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r4 = _nt_SYM_END_DBLOCK
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(UntypedSingleAttrObjectBlock0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:untyped_single_attr_object_block][start_index] = r0

    r0
  end

  def _nt_single_attr_object_complex_head
    start_index = index
    if node_cache[:single_attr_object_complex_head].has_key?(index)
      cached = node_cache[:single_attr_object_complex_head][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_SYM_START_DBLOCK

    node_cache[:single_attr_object_complex_head][start_index] = r0

    r0
  end

  module PrimitiveObjectBlock0
    def untyped_primitive_object_block
      elements[1]
    end
  end

  def _nt_primitive_object_block
    start_index = index
    if node_cache[:primitive_object_block].has_key?(index)
      cached = node_cache[:primitive_object_block][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_type_identifier
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r3 = _nt_untyped_primitive_object_block
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(PrimitiveObjectBlock0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:primitive_object_block][start_index] = r0

    r0
  end

  module UntypedPrimitiveObjectBlock0
    def SYM_START_DBLOCK
      elements[0]
    end

    def primitive_object_value
      elements[1]
    end

    def SYM_END_DBLOCK
      elements[2]
    end
  end

  def _nt_untyped_primitive_object_block
    start_index = index
    if node_cache[:untyped_primitive_object_block].has_key?(index)
      cached = node_cache[:untyped_primitive_object_block][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_SYM_START_DBLOCK
    s0 << r1
    if r1
      r2 = _nt_primitive_object_value
      s0 << r2
      if r2
        r3 = _nt_SYM_END_DBLOCK
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(UntypedPrimitiveObjectBlock0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:untyped_primitive_object_block][start_index] = r0

    r0
  end

  def _nt_primitive_object_value
    start_index = index
    if node_cache[:primitive_object_value].has_key?(index)
      cached = node_cache[:primitive_object_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_term_code
    if r1
      r0 = r1
    else
      r2 = _nt_simple_list_value
      if r2
        r0 = r2
      else
        r3 = _nt_simple_value
        if r3
          r0 = r3
        else
          r4 = _nt_simple_interval_value
          if r4
            r0 = r4
          else
            r5 = _nt_term_code_list_value
            if r5
              r0 = r5
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end
    end

    node_cache[:primitive_object_value][start_index] = r0

    r0
  end

  def _nt_simple_value
    start_index = index
    if node_cache[:simple_value].has_key?(index)
      cached = node_cache[:simple_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_string_value
    if r1
      r0 = r1
    else
      r2 = _nt_integer_value
      if r2
        r0 = r2
      else
        r3 = _nt_real_value
        if r3
          r0 = r3
        else
          r4 = _nt_boolean_value
          if r4
            r0 = r4
          else
            r5 = _nt_character_value
            if r5
              r0 = r5
            else
              r6 = _nt_date_value
              if r6
                r0 = r6
              else
                r7 = _nt_time_value
                if r7
                  r0 = r7
                else
                  r8 = _nt_date_time_value
                  if r8
                    r0 = r8
                  else
                    r9 = _nt_duration_value
                    if r9
                      r0 = r9
                    else
                      r10 = _nt_uri_value
                      if r10
                        r0 = r10
                      else
                        @index = i0
                        r0 = nil
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:simple_value][start_index] = r0

    r0
  end

  def _nt_simple_list_value
    start_index = index
    if node_cache[:simple_list_value].has_key?(index)
      cached = node_cache[:simple_list_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_string_list_value
    if r1
      r0 = r1
    else
      r2 = _nt_integer_list_value
      if r2
        r0 = r2
      else
        r3 = _nt_real_list_value
        if r3
          r0 = r3
        else
          r4 = _nt_boolean_list_value
          if r4
            r0 = r4
          else
            r5 = _nt_character_list_value
            if r5
              r0 = r5
            else
              r6 = _nt_date_list_value
              if r6
                r0 = r6
              else
                r7 = _nt_time_list_value
                if r7
                  r0 = r7
                else
                  r8 = _nt_date_time_list_value
                  if r8
                    r0 = r8
                  else
                    r9 = _nt_duration_list_value
                    if r9
                      r0 = r9
                    else
                      @index = i0
                      r0 = nil
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:simple_list_value][start_index] = r0

    r0
  end

  def _nt_simple_interval_value
    start_index = index
    if node_cache[:simple_interval_value].has_key?(index)
      cached = node_cache[:simple_interval_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_integer_interval_value
    if r1
      r0 = r1
    else
      r2 = _nt_real_interval_value
      if r2
        r0 = r2
      else
        r3 = _nt_date_interval_value
        if r3
          r0 = r3
        else
          r4 = _nt_time_interval_value
          if r4
            r0 = r4
          else
            r5 = _nt_date_time_interval_value
            if r5
              r0 = r5
            else
              r6 = _nt_duration_interval_value
              if r6
                r0 = r6
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end
    end

    node_cache[:simple_interval_value][start_index] = r0

    r0
  end

  def _nt_term_code
    start_index = index
    if node_cache[:term_code].has_key?(index)
      cached = node_cache[:term_code][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_V_QUALIFIED_TERM_CODE_REF

    node_cache[:term_code][start_index] = r0

    r0
  end

  module TermCodeListValue0
    def term_code
      elements[1]
    end
  end

  module TermCodeListValue1
    def term_code
      elements[0]
    end

  end

  module TermCodeListValue2
    def term_code
      elements[0]
    end

    def SYM_LIST_CONTINUE
      elements[2]
    end
  end

  def _nt_term_code_list_value
    start_index = index
    if node_cache[:term_code_list_value].has_key?(index)
      cached = node_cache[:term_code_list_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_term_code
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        if has_terminal?(',', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r5 = nil
        end
        s4 << r5
        if r5
          r6 = _nt_term_code
          s4 << r6
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(TermCodeListValue0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(TermCodeListValue1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i7, s7 = index, []
      r8 = _nt_term_code
      s7 << r8
      if r8
        if has_terminal?(',', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r9 = nil
        end
        s7 << r9
        if r9
          r10 = _nt_SYM_LIST_CONTINUE
          s7 << r10
        end
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(TermCodeListValue2)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:term_code_list_value][start_index] = r0

    r0
  end

  def _nt_uri_value
    start_index = index
    if node_cache[:uri_value].has_key?(index)
      cached = node_cache[:uri_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_V_URI

    node_cache[:uri_value][start_index] = r0

    r0
  end

end

class DADLParser < Treetop::Runtime::CompiledParser
  include DADL
end
