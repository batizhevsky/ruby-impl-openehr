# Autogenerated from a Treetop grammar. Edits may be lost.


module CADL
  include Treetop::Runtime

  def root
    @root ||= :V_CADL_TEXT
  end

  def _nt_V_CADL_TEXT
    start_index = index
    if node_cache[:V_CADL_TEXT].has_key?(index)
      cached = node_cache[:V_CADL_TEXT][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_c_complex_object
    if r1
      r0 = r1
    else
      r2 = _nt_assertions
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:V_CADL_TEXT][start_index] = r0

    r0
  end

  module CComplexObject0
    def SYM_MATCHES
      elements[0]
    end

    def SYM_START_CBLOCK
      elements[1]
    end

    def c_complex_object_body
      elements[2]
    end

    def SYM_END_CBLOCK
      elements[3]
    end
  end

  module CComplexObject1
    def c_complex_object_head
      elements[0]
    end

  end

  def _nt_c_complex_object
    start_index = index
    if node_cache[:c_complex_object].has_key?(index)
      cached = node_cache[:c_complex_object][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_c_complex_object_head
    s0 << r1
    if r1
      i3, s3 = index, []
      r4 = _nt_SYM_MATCHES
      s3 << r4
      if r4
        r5 = _nt_SYM_START_CBLOCK
        s3 << r5
        if r5
          r6 = _nt_c_complex_object_body
          s3 << r6
          if r6
            r7 = _nt_SYM_END_CBLOCK
            s3 << r7
          end
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(CComplexObject0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CComplexObject1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:c_complex_object][start_index] = r0

    r0
  end

  module CComplexObjectHead0
    def c_complex_object_id
      elements[0]
    end

  end

  def _nt_c_complex_object_head
    start_index = index
    if node_cache[:c_complex_object_head].has_key?(index)
      cached = node_cache[:c_complex_object_head][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_c_complex_object_id
    s0 << r1
    if r1
      r3 = _nt_c_occurrences
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CComplexObjectHead0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:c_complex_object_head][start_index] = r0

    r0
  end

  module CComplexObjectId0
    def type_identifier
      elements[0]
    end

    def space
      elements[2]
    end
  end

  def _nt_c_complex_object_id
    start_index = index
    if node_cache[:c_complex_object_id].has_key?(index)
      cached = node_cache[:c_complex_object_id][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_type_identifier
    s0 << r1
    if r1
      r3 = _nt_V_LOCAL_TERM_CODE_REF
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r4 = _nt_space
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CComplexObjectId0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:c_complex_object_id][start_index] = r0

    r0
  end

  def _nt_c_complex_object_body
    start_index = index
    if node_cache[:c_complex_object_body].has_key?(index)
      cached = node_cache[:c_complex_object_body][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_c_any
    if r1
      r0 = r1
    else
      r2 = _nt_c_attributes
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:c_complex_object_body][start_index] = r0

    r0
  end

  def _nt_c_object
    start_index = index
    if node_cache[:c_object].has_key?(index)
      cached = node_cache[:c_object][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_c_complex_object
    if r1
      r0 = r1
    else
      r2 = _nt_archetype_slot
      if r2
        r0 = r2
      else
        r3 = _nt_archetype_internal_ref
        if r3
          r0 = r3
        else
          r4 = _nt_constraint_ref
          if r4
            r0 = r4
          else
            r5 = _nt_c_primitive_object
            if r5
              r0 = r5
            else
              r6 = _nt_V_C_DOMAIN_TYPE
              if r6
                r0 = r6
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end
    end

    node_cache[:c_object][start_index] = r0

    r0
  end

  module ArchetypeInternalRef0
    def SYM_USE_NODE
      elements[0]
    end

    def type_identifier
      elements[1]
    end

    def object_path
      elements[3]
    end
  end

  def _nt_archetype_internal_ref
    start_index = index
    if node_cache[:archetype_internal_ref].has_key?(index)
      cached = node_cache[:archetype_internal_ref][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_SYM_USE_NODE
    s0 << r1
    if r1
      r2 = _nt_type_identifier
      s0 << r2
      if r2
        r4 = _nt_c_occurrences
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
        if r3
          r5 = _nt_object_path
          s0 << r5
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ArchetypeInternalRef0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:archetype_internal_ref][start_index] = r0

    r0
  end

  module ArchetypeSlot0
    def c_archetype_slot_head
      elements[0]
    end

    def SYM_MATCHES
      elements[1]
    end

    def SYM_START_CBLOCK
      elements[2]
    end

    def SYM_END_CBLOCK
      elements[5]
    end
  end

  def _nt_archetype_slot
    start_index = index
    if node_cache[:archetype_slot].has_key?(index)
      cached = node_cache[:archetype_slot][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_c_archetype_slot_head
    s0 << r1
    if r1
      r2 = _nt_SYM_MATCHES
      s0 << r2
      if r2
        r3 = _nt_SYM_START_CBLOCK
        s0 << r3
        if r3
          r5 = _nt_c_includes
          if r5
            r4 = r5
          else
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r4
          if r4
            r7 = _nt_c_excludes
            if r7
              r6 = r7
            else
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r6
            if r6
              r8 = _nt_SYM_END_CBLOCK
              s0 << r8
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ArchetypeSlot0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:archetype_slot][start_index] = r0

    r0
  end

  module CArchetypeSlotHead0
    def c_archetype_slot_id
      elements[0]
    end

    def white_space
      elements[1]
    end

  end

  def _nt_c_archetype_slot_head
    start_index = index
    if node_cache[:c_archetype_slot_head].has_key?(index)
      cached = node_cache[:c_archetype_slot_head][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_c_archetype_slot_id
    s0 << r1
    if r1
      r2 = _nt_white_space
      s0 << r2
      if r2
        r4 = _nt_c_occurrences
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CArchetypeSlotHead0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:c_archetype_slot_head][start_index] = r0

    r0
  end

  module CArchetypeSlotId0
    def SYM_ALLOW_ARCHETYPE
      elements[0]
    end

    def type_identifier
      elements[1]
    end

  end

  def _nt_c_archetype_slot_id
    start_index = index
    if node_cache[:c_archetype_slot_id].has_key?(index)
      cached = node_cache[:c_archetype_slot_id][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_SYM_ALLOW_ARCHETYPE
    s0 << r1
    if r1
      r2 = _nt_type_identifier
      s0 << r2
      if r2
        r4 = _nt_V_LOCAL_TERM_CODE_REF
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CArchetypeSlotId0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:c_archetype_slot_id][start_index] = r0

    r0
  end

  def _nt_c_primitive_object
    start_index = index
    if node_cache[:c_primitive_object].has_key?(index)
      cached = node_cache[:c_primitive_object][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_c_primitive

    node_cache[:c_primitive_object][start_index] = r0

    r0
  end

  def _nt_c_primitive
    start_index = index
    if node_cache[:c_primitive].has_key?(index)
      cached = node_cache[:c_primitive][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_c_integer
    if r1
      r0 = r1
    else
      r2 = _nt_c_real
      if r2
        r0 = r2
      else
        r3 = _nt_c_date
        if r3
          r0 = r3
        else
          r4 = _nt_c_time
          if r4
            r0 = r4
          else
            r5 = _nt_c_date_time
            if r5
              r0 = r5
            else
              r6 = _nt_c_duration
              if r6
                r0 = r6
              else
                r7 = _nt_c_string
                if r7
                  r0 = r7
                else
                  r8 = _nt_c_boolean
                  if r8
                    r0 = r8
                  else
                    @index = i0
                    r0 = nil
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:c_primitive][start_index] = r0

    r0
  end

  module CAny0
    def space
      elements[1]
    end
  end

  def _nt_c_any
    start_index = index
    if node_cache[:c_any].has_key?(index)
      cached = node_cache[:c_any][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('*', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('*')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CAny0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:c_any][start_index] = r0

    r0
  end

  def _nt_c_attributes
    start_index = index
    if node_cache[:c_attributes].has_key?(index)
      cached = node_cache[:c_attributes][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_c_attribute
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:c_attributes][start_index] = r0

    r0
  end

  module CAttribute0
    def c_attr_head
      elements[0]
    end

    def c_attr_body
      elements[1]
    end
  end

  def _nt_c_attribute
    start_index = index
    if node_cache[:c_attribute].has_key?(index)
      cached = node_cache[:c_attribute][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_c_attr_head
    s0 << r1
    if r1
      r2 = _nt_c_attr_body
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CAttribute0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:c_attribute][start_index] = r0

    r0
  end

  module CAttrHead0
    def V_ATTRIBUTE_IDENTIFIER
      elements[0]
    end

    def white_space
      elements[1]
    end

  end

  def _nt_c_attr_head
    start_index = index
    if node_cache[:c_attr_head].has_key?(index)
      cached = node_cache[:c_attr_head][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_V_ATTRIBUTE_IDENTIFIER
    s0 << r1
    if r1
      r2 = _nt_white_space
      s0 << r2
      if r2
        r4 = _nt_c_existence
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
        if r3
          r6 = _nt_c_cardinality
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CAttrHead0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:c_attr_head][start_index] = r0

    r0
  end

  module CAttrBody0
    def SYM_MATCHES
      elements[0]
    end

    def SYM_START_CBLOCK
      elements[1]
    end

    def c_attr_values
      elements[2]
    end

    def SYM_END_CBLOCK
      elements[3]
    end
  end

  def _nt_c_attr_body
    start_index = index
    if node_cache[:c_attr_body].has_key?(index)
      cached = node_cache[:c_attr_body][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_SYM_MATCHES
    s0 << r1
    if r1
      r2 = _nt_SYM_START_CBLOCK
      s0 << r2
      if r2
        r3 = _nt_c_attr_values
        s0 << r3
        if r3
          r4 = _nt_SYM_END_CBLOCK
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CAttrBody0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:c_attr_body][start_index] = r0

    r0
  end

  def _nt_c_attr_values
    start_index = index
    if node_cache[:c_attr_values].has_key?(index)
      cached = node_cache[:c_attr_values][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_c_any
    if r1
      r0 = r1
    else
      s2, i2 = [], index
      loop do
        r3 = _nt_c_object
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:c_attr_values][start_index] = r0

    r0
  end

  module CIncludes0
    def SYM_INCLUDE
      elements[0]
    end

    def assertions
      elements[1]
    end
  end

  def _nt_c_includes
    start_index = index
    if node_cache[:c_includes].has_key?(index)
      cached = node_cache[:c_includes][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_SYM_INCLUDE
    s0 << r1
    if r1
      r2 = _nt_assertions
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CIncludes0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:c_includes][start_index] = r0

    r0
  end

  module CExcludes0
    def SYM_EXCLUDE
      elements[0]
    end

    def assertions
      elements[1]
    end
  end

  def _nt_c_excludes
    start_index = index
    if node_cache[:c_excludes].has_key?(index)
      cached = node_cache[:c_excludes][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_SYM_EXCLUDE
    s0 << r1
    if r1
      r2 = _nt_assertions
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CExcludes0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:c_excludes][start_index] = r0

    r0
  end

  module CExistence0
    def SYM_EXISTENCE
      elements[0]
    end

    def SYM_MATCHES
      elements[1]
    end

    def SYM_START_CBLOCK
      elements[2]
    end

    def existence_spec
      elements[3]
    end

    def SYM_END_CBLOCK
      elements[4]
    end
  end

  def _nt_c_existence
    start_index = index
    if node_cache[:c_existence].has_key?(index)
      cached = node_cache[:c_existence][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_SYM_EXISTENCE
    s0 << r1
    if r1
      r2 = _nt_SYM_MATCHES
      s0 << r2
      if r2
        r3 = _nt_SYM_START_CBLOCK
        s0 << r3
        if r3
          r4 = _nt_existence_spec
          s0 << r4
          if r4
            r5 = _nt_SYM_END_CBLOCK
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CExistence0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:c_existence][start_index] = r0

    r0
  end

  module ExistenceSpec0
    def SYM_ELLIPSIS
      elements[0]
    end

    def V_INTEGER
      elements[1]
    end
  end

  module ExistenceSpec1
    def V_INTEGER
      elements[0]
    end

  end

  def _nt_existence_spec
    start_index = index
    if node_cache[:existence_spec].has_key?(index)
      cached = node_cache[:existence_spec][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_V_INTEGER
    s0 << r1
    if r1
      i3, s3 = index, []
      r4 = _nt_SYM_ELLIPSIS
      s3 << r4
      if r4
        r5 = _nt_V_INTEGER
        s3 << r5
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(ExistenceSpec0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ExistenceSpec1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:existence_spec][start_index] = r0

    r0
  end

  module CCardinality0
    def SYM_CARDINALITY
      elements[0]
    end

    def SYM_MATCHES
      elements[1]
    end

    def SYM_START_CBLOCK
      elements[2]
    end

    def cardinality_spec
      elements[3]
    end

    def SYM_END_CBLOCK
      elements[4]
    end
  end

  def _nt_c_cardinality
    start_index = index
    if node_cache[:c_cardinality].has_key?(index)
      cached = node_cache[:c_cardinality][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_SYM_CARDINALITY
    s0 << r1
    if r1
      r2 = _nt_SYM_MATCHES
      s0 << r2
      if r2
        r3 = _nt_SYM_START_CBLOCK
        s0 << r3
        if r3
          r4 = _nt_cardinality_spec
          s0 << r4
          if r4
            r5 = _nt_SYM_END_CBLOCK
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CCardinality0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:c_cardinality][start_index] = r0

    r0
  end

  module CardinalitySpec0
    def white_space
      elements[1]
    end

    def SYM_UNIQUE
      elements[2]
    end
  end

  module CardinalitySpec1
    def white_space
      elements[1]
    end

  end

  module CardinalitySpec2
    def occurrence_spec
      elements[0]
    end

  end

  module CardinalitySpec3
    def white_space
      elements[1]
    end

  end

  module CardinalitySpec4
    def occurrence_spec
      elements[0]
    end

    def SYM_UNIQUE
      elements[1]
    end

  end

  def _nt_cardinality_spec
    start_index = index
    if node_cache[:cardinality_spec].has_key?(index)
      cached = node_cache[:cardinality_spec][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_occurrence_spec
    s1 << r2
    if r2
      i4, s4 = index, []
      if has_terminal?(';', false, index)
        r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(';')
        r5 = nil
      end
      s4 << r5
      if r5
        r6 = _nt_white_space
        s4 << r6
        if r6
          i7 = index
          r8 = _nt_SYM_UNORDERD
          if r8
            r7 = r8
          else
            r9 = _nt_SYM_ORDERED
            if r9
              r7 = r9
            else
              @index = i7
              r7 = nil
            end
          end
          s4 << r7
          if r7
            i11, s11 = index, []
            if has_terminal?(';', false, index)
              r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(';')
              r12 = nil
            end
            s11 << r12
            if r12
              r13 = _nt_white_space
              s11 << r13
              if r13
                r14 = _nt_SYM_UNIQUE
                s11 << r14
              end
            end
            if s11.last
              r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
              r11.extend(CardinalitySpec0)
            else
              @index = i11
              r11 = nil
            end
            if r11
              r10 = r11
            else
              r10 = instantiate_node(SyntaxNode,input, index...index)
            end
            s4 << r10
          end
        end
      end
      if s4.last
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        r4.extend(CardinalitySpec1)
      else
        @index = i4
        r4 = nil
      end
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(CardinalitySpec2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i15, s15 = index, []
      r16 = _nt_occurrence_spec
      s15 << r16
      if r16
        r17 = _nt_SYM_UNIQUE
        s15 << r17
        if r17
          i19, s19 = index, []
          if has_terminal?(';', false, index)
            r20 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(';')
            r20 = nil
          end
          s19 << r20
          if r20
            r21 = _nt_white_space
            s19 << r21
            if r21
              i22 = index
              r23 = _nt_SYM_ORDERED
              if r23
                r22 = r23
              else
                r24 = _nt_SYM_UNORDERD
                if r24
                  r22 = r24
                else
                  @index = i22
                  r22 = nil
                end
              end
              s19 << r22
            end
          end
          if s19.last
            r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
            r19.extend(CardinalitySpec3)
          else
            @index = i19
            r19 = nil
          end
          if r19
            r18 = r19
          else
            r18 = instantiate_node(SyntaxNode,input, index...index)
          end
          s15 << r18
        end
      end
      if s15.last
        r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
        r15.extend(CardinalitySpec4)
      else
        @index = i15
        r15 = nil
      end
      if r15
        r0 = r15
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:cardinality_spec][start_index] = r0

    r0
  end

  module COccurrences0
    def SYM_OCCURRENCES
      elements[0]
    end

    def SYM_MATCHES
      elements[1]
    end

    def SYM_START_CBLOCK
      elements[2]
    end

    def occurrence_spec
      elements[3]
    end

    def SYM_END_CBLOCK
      elements[4]
    end
  end

  def _nt_c_occurrences
    start_index = index
    if node_cache[:c_occurrences].has_key?(index)
      cached = node_cache[:c_occurrences][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_SYM_OCCURRENCES
    s0 << r1
    if r1
      r2 = _nt_SYM_MATCHES
      s0 << r2
      if r2
        r3 = _nt_SYM_START_CBLOCK
        s0 << r3
        if r3
          r4 = _nt_occurrence_spec
          s0 << r4
          if r4
            r5 = _nt_SYM_END_CBLOCK
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(COccurrences0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:c_occurrences][start_index] = r0

    r0
  end

  module OccurrenceSpec0
    def V_INTEGER
      elements[0]
    end

    def SYM_ELLIPSIS
      elements[1]
    end
  end

  module OccurrenceSpec1
    def cardinality_limit_value
      elements[1]
    end
  end

  def _nt_occurrence_spec
    start_index = index
    if node_cache[:occurrence_spec].has_key?(index)
      cached = node_cache[:occurrence_spec][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2, s2 = index, []
    r3 = _nt_V_INTEGER
    s2 << r3
    if r3
      r4 = _nt_SYM_ELLIPSIS
      s2 << r4
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(OccurrenceSpec0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r5 = _nt_cardinality_limit_value
      s0 << r5
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(OccurrenceSpec1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:occurrence_spec][start_index] = r0

    r0
  end

  def _nt_cardinality_limit_value
    start_index = index
    if node_cache[:cardinality_limit_value].has_key?(index)
      cached = node_cache[:cardinality_limit_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_integer_value
    if r1
      r0 = r1
    else
      if has_terminal?('*', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('*')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:cardinality_limit_value][start_index] = r0

    r0
  end

  def _nt_c_integer_spec
    start_index = index
    if node_cache[:c_integer_spec].has_key?(index)
      cached = node_cache[:c_integer_spec][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_cardinality_limit_value
    if r1
      r0 = r1
    else
      r2 = _nt_integer_list_value
      if r2
        r0 = r2
      else
        r3 = _nt_integer_interval_value
        if r3
          r0 = r3
        else
          r4 = _nt_occurrence_spec
          if r4
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:c_integer_spec][start_index] = r0

    r0
  end

  module CInteger0
    def integer_value
      elements[1]
    end
  end

  module CInteger1
    def c_integer_spec
      elements[0]
    end

  end

  def _nt_c_integer
    start_index = index
    if node_cache[:c_integer].has_key?(index)
      cached = node_cache[:c_integer][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_c_integer_spec
    s0 << r1
    if r1
      i3, s3 = index, []
      if has_terminal?(';', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(';')
        r4 = nil
      end
      s3 << r4
      if r4
        r5 = _nt_integer_value
        s3 << r5
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(CInteger0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CInteger1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:c_integer][start_index] = r0

    r0
  end

  def _nt_c_real_spec
    start_index = index
    if node_cache[:c_real_spec].has_key?(index)
      cached = node_cache[:c_real_spec][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_real_value
    if r1
      r0 = r1
    else
      r2 = _nt_real_list_value
      if r2
        r0 = r2
      else
        r3 = _nt_real_interval_value
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:c_real_spec][start_index] = r0

    r0
  end

  module CReal0
    def real_value
      elements[1]
    end
  end

  module CReal1
    def c_real_spec
      elements[0]
    end

  end

  def _nt_c_real
    start_index = index
    if node_cache[:c_real].has_key?(index)
      cached = node_cache[:c_real][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_c_real_spec
    s0 << r1
    if r1
      i3, s3 = index, []
      if has_terminal?(';', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(';')
        r4 = nil
      end
      s3 << r4
      if r4
        r5 = _nt_real_value
        s3 << r5
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(CReal0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CReal1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:c_real][start_index] = r0

    r0
  end

  def _nt_c_date_constraint
    start_index = index
    if node_cache[:c_date_constraint].has_key?(index)
      cached = node_cache[:c_date_constraint][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_V_ISO8601_DATE_CONSTRAINT_PATTERN
    if r1
      r0 = r1
    else
      r2 = _nt_date_value
      if r2
        r0 = r2
      else
        r3 = _nt_date_interval_value
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:c_date_constraint][start_index] = r0

    r0
  end

  module CDate0
    def date_value
      elements[1]
    end
  end

  module CDate1
    def c_date_constraint
      elements[0]
    end

  end

  def _nt_c_date
    start_index = index
    if node_cache[:c_date].has_key?(index)
      cached = node_cache[:c_date][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_c_date_constraint
    s0 << r1
    if r1
      i3, s3 = index, []
      if has_terminal?(';', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(';')
        r4 = nil
      end
      s3 << r4
      if r4
        r5 = _nt_date_value
        s3 << r5
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(CDate0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CDate1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:c_date][start_index] = r0

    r0
  end

  def _nt_c_time_constraint
    start_index = index
    if node_cache[:c_time_constraint].has_key?(index)
      cached = node_cache[:c_time_constraint][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_V_ISO8601_TIME_CONSTRAINT_PATTERN
    if r1
      r0 = r1
    else
      r2 = _nt_time_value
      if r2
        r0 = r2
      else
        r3 = _nt_time_interval_value
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:c_time_constraint][start_index] = r0

    r0
  end

  module CTime0
    def time_value
      elements[1]
    end
  end

  module CTime1
    def c_time_constraint
      elements[0]
    end

  end

  def _nt_c_time
    start_index = index
    if node_cache[:c_time].has_key?(index)
      cached = node_cache[:c_time][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_c_time_constraint
    s0 << r1
    if r1
      i3, s3 = index, []
      if has_terminal?(';', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(';')
        r4 = nil
      end
      s3 << r4
      if r4
        r5 = _nt_time_value
        s3 << r5
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(CTime0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CTime1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:c_time][start_index] = r0

    r0
  end

  def _nt_c_date_time_constraint
    start_index = index
    if node_cache[:c_date_time_constraint].has_key?(index)
      cached = node_cache[:c_date_time_constraint][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_V_ISO8601_DATE_TIME_CONSTRAINT_PATTERN
    if r1
      r0 = r1
    else
      r2 = _nt_date_time_value
      if r2
        r0 = r2
      else
        r3 = _nt_date_time_interval_value
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:c_date_time_constraint][start_index] = r0

    r0
  end

  module CDateTime0
    def c_date_time_constraint
      elements[0]
    end

    def date_time_value
      elements[2]
    end
  end

  def _nt_c_date_time
    start_index = index
    if node_cache[:c_date_time].has_key?(index)
      cached = node_cache[:c_date_time][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_c_date_time_constraint
    if r1
      r0 = r1
    else
      i2, s2 = index, []
      r3 = _nt_c_date_time_constraint
      s2 << r3
      if r3
        if has_terminal?(';', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(';')
          r4 = nil
        end
        s2 << r4
        if r4
          r5 = _nt_date_time_value
          s2 << r5
        end
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(CDateTime0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:c_date_time][start_index] = r0

    r0
  end

  module CDurationConstraint0
    def duration_interval_pattern
      elements[1]
    end
  end

  module CDurationConstraint1
    def duration_pattern
      elements[0]
    end

  end

  def _nt_c_duration_constraint
    start_index = index
    if node_cache[:c_duration_constraint].has_key?(index)
      cached = node_cache[:c_duration_constraint][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_duration_pattern
    s1 << r2
    if r2
      i4, s4 = index, []
      if has_terminal?('/', false, index)
        r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('/')
        r5 = nil
      end
      s4 << r5
      if r5
        r6 = _nt_duration_interval_pattern
        s4 << r6
      end
      if s4.last
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        r4.extend(CDurationConstraint0)
      else
        @index = i4
        r4 = nil
      end
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(CDurationConstraint1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r7 = _nt_duration_value
      if r7
        r0 = r7
      else
        r8 = _nt_duration_interval_value
        if r8
          r0 = r8
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:c_duration_constraint][start_index] = r0

    r0
  end

  def _nt_duration_pattern
    start_index = index
    if node_cache[:duration_pattern].has_key?(index)
      cached = node_cache[:duration_pattern][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_V_ISO8601_TIME_CONSTRAINT_PATTERN

    node_cache[:duration_pattern][start_index] = r0

    r0
  end

  module CDuration0
    def duration_value
      elements[1]
    end
  end

  module CDuration1
    def c_duration_constraint
      elements[0]
    end

  end

  def _nt_c_duration
    start_index = index
    if node_cache[:c_duration].has_key?(index)
      cached = node_cache[:c_duration][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_c_duration_constraint
    s0 << r1
    if r1
      i3, s3 = index, []
      if has_terminal?(';', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(';')
        r4 = nil
      end
      s3 << r4
      if r4
        r5 = _nt_duration_value
        s3 << r5
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(CDuration0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CDuration1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:c_duration][start_index] = r0

    r0
  end

  module CStringSpec0
    def SYM_LIST_CONTINUE
      elements[1]
    end
  end

  module CStringSpec1
    def string_list_value
      elements[0]
    end

  end

  def _nt_c_string_spec
    start_index = index
    if node_cache[:c_string_spec].has_key?(index)
      cached = node_cache[:c_string_spec][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_V_STRING
    if r1
      r0 = r1
    else
      i2, s2 = index, []
      r3 = _nt_string_list_value
      s2 << r3
      if r3
        i5, s5 = index, []
        if has_terminal?(',', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r6 = nil
        end
        s5 << r6
        if r6
          r7 = _nt_SYM_LIST_CONTINUE
          s5 << r7
        end
        if s5.last
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          r5.extend(CStringSpec0)
        else
          @index = i5
          r5 = nil
        end
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s2 << r4
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(CStringSpec1)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r0 = r2
      else
        r8 = _nt_V_REGEXP
        if r8
          r0 = r8
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:c_string_spec][start_index] = r0

    r0
  end

  module CString0
    def string_value
      elements[1]
    end
  end

  module CString1
    def c_string_spec
      elements[0]
    end

  end

  def _nt_c_string
    start_index = index
    if node_cache[:c_string].has_key?(index)
      cached = node_cache[:c_string][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_c_string_spec
    s0 << r1
    if r1
      i3, s3 = index, []
      if has_terminal?(';', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(';')
        r4 = nil
      end
      s3 << r4
      if r4
        r5 = _nt_string_value
        s3 << r5
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(CString0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CString1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:c_string][start_index] = r0

    r0
  end

  module CBooleanSpec0
    def SYM_FALSE
      elements[1]
    end
  end

  module CBooleanSpec1
    def SYM_TRUE
      elements[0]
    end

  end

  module CBooleanSpec2
    def SYM_TRUE
      elements[1]
    end
  end

  module CBooleanSpec3
    def SYM_FALSE
      elements[0]
    end

  end

  def _nt_c_boolean_spec
    start_index = index
    if node_cache[:c_boolean_spec].has_key?(index)
      cached = node_cache[:c_boolean_spec][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_SYM_TRUE
    s1 << r2
    if r2
      i4, s4 = index, []
      if has_terminal?(',', false, index)
        r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(',')
        r5 = nil
      end
      s4 << r5
      if r5
        r6 = _nt_SYM_FALSE
        s4 << r6
      end
      if s4.last
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        r4.extend(CBooleanSpec0)
      else
        @index = i4
        r4 = nil
      end
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(CBooleanSpec1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i7, s7 = index, []
      r8 = _nt_SYM_FALSE
      s7 << r8
      if r8
        i10, s10 = index, []
        if has_terminal?(',', false, index)
          r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r11 = nil
        end
        s10 << r11
        if r11
          r12 = _nt_SYM_TRUE
          s10 << r12
        end
        if s10.last
          r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
          r10.extend(CBooleanSpec2)
        else
          @index = i10
          r10 = nil
        end
        if r10
          r9 = r10
        else
          r9 = instantiate_node(SyntaxNode,input, index...index)
        end
        s7 << r9
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(CBooleanSpec3)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:c_boolean_spec][start_index] = r0

    r0
  end

  module CBoolean0
    def boolean_value
      elements[1]
    end
  end

  module CBoolean1
    def c_boolean_spec
      elements[0]
    end

  end

  def _nt_c_boolean
    start_index = index
    if node_cache[:c_boolean].has_key?(index)
      cached = node_cache[:c_boolean][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_c_boolean_spec
    s0 << r1
    if r1
      i3, s3 = index, []
      if has_terminal?(';', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(';')
        r4 = nil
      end
      s3 << r4
      if r4
        r5 = _nt_boolean_value
        s3 << r5
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(CBoolean0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CBoolean1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:c_boolean][start_index] = r0

    r0
  end

  def _nt_constraint_ref
    start_index = index
    if node_cache[:constraint_ref].has_key?(index)
      cached = node_cache[:constraint_ref][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_V_LOCAL_TERM_CODE_REF

    node_cache[:constraint_ref][start_index] = r0

    r0
  end

  module VREGEXP0
  end

  module VREGEXP1
  end

  module VREGEXP2
  end

  module VREGEXP3
  end

  module VREGEXP4
  end

  module VREGEXP5
  end

  def _nt_V_REGEXP
    start_index = index
    if node_cache[:V_REGEXP].has_key?(index)
      cached = node_cache[:V_REGEXP][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2, s2 = index, []
    i3 = index
    if has_terminal?('=', false, index)
      r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('=')
      r4 = nil
    end
    if r4
      r3 = r4
    else
      if has_terminal?('!', false, index)
        r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('!')
        r5 = nil
      end
      if r5
        r3 = r5
      else
        @index = i3
        r3 = nil
      end
    end
    s2 << r3
    if r3
      if has_terminal?('~', false, index)
        r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('~')
        r6 = nil
      end
      s2 << r6
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(VREGEXP0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      i7 = index
      i8, s8 = index, []
      if has_terminal?('/', false, index)
        r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('/')
        r9 = nil
      end
      s8 << r9
      if r9
        s10, i10 = [], index
        loop do
          i11 = index
          if has_terminal?('\/', false, index)
            r12 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('\/')
            r12 = nil
          end
          if r12
            r11 = r12
          else
            i13, s13 = index, []
            i14 = index
            if has_terminal?('/', false, index)
              r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('/')
              r15 = nil
            end
            if r15
              r14 = nil
            else
              @index = i14
              r14 = instantiate_node(SyntaxNode,input, index...index)
            end
            s13 << r14
            if r14
              if index < input_length
                r16 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("any character")
                r16 = nil
              end
              s13 << r16
            end
            if s13.last
              r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
              r13.extend(VREGEXP1)
            else
              @index = i13
              r13 = nil
            end
            if r13
              r11 = r13
            else
              @index = i11
              r11 = nil
            end
          end
          if r11
            s10 << r11
          else
            break
          end
        end
        r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
        s8 << r10
        if r10
          if has_terminal?('/', false, index)
            r17 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('/')
            r17 = nil
          end
          s8 << r17
        end
      end
      if s8.last
        r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
        r8.extend(VREGEXP2)
      else
        @index = i8
        r8 = nil
      end
      if r8
        r7 = r8
      else
        i18, s18 = index, []
        if has_terminal?('^', false, index)
          r19 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('^')
          r19 = nil
        end
        s18 << r19
        if r19
          s20, i20 = [], index
          loop do
            i21, s21 = index, []
            i22 = index
            if has_terminal?('^', false, index)
              r23 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('^')
              r23 = nil
            end
            if r23
              r22 = nil
            else
              @index = i22
              r22 = instantiate_node(SyntaxNode,input, index...index)
            end
            s21 << r22
            if r22
              if index < input_length
                r24 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("any character")
                r24 = nil
              end
              s21 << r24
            end
            if s21.last
              r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
              r21.extend(VREGEXP3)
            else
              @index = i21
              r21 = nil
            end
            if r21
              s20 << r21
            else
              break
            end
          end
          r20 = instantiate_node(SyntaxNode,input, i20...index, s20)
          s18 << r20
          if r20
            if has_terminal?('^', false, index)
              r25 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('^')
              r25 = nil
            end
            s18 << r25
          end
        end
        if s18.last
          r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
          r18.extend(VREGEXP4)
        else
          @index = i18
          r18 = nil
        end
        if r18
          r7 = r18
        else
          @index = i7
          r7 = nil
        end
      end
      s0 << r7
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(VREGEXP5)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:V_REGEXP][start_index] = r0

    r0
  end

  module VCDOMAINTYPE0
  end

  def _nt_V_C_DOMAIN_TYPE
    start_index = index
    if node_cache[:V_C_DOMAIN_TYPE].has_key?(index)
      cached = node_cache[:V_C_DOMAIN_TYPE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('(', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if has_terminal?('\G[A-Z]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          r5 = _nt_IDCHAR
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
        if r4
          if has_terminal?(')', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(')')
            r7 = nil
          end
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r6
          if r6
            s8, i8 = [], index
            loop do
              if has_terminal?('\G[ \\n]', true, index)
                r9 = true
                @index += 1
              else
                r9 = nil
              end
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s0 << r8
            if r8
              if has_terminal?('<', false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('<')
                r10 = nil
              end
              s0 << r10
              if r10
                s11, i11 = [], index
                loop do
                  if has_terminal?('\G[^>]', true, index)
                    r12 = true
                    @index += 1
                  else
                    r12 = nil
                  end
                  if r12
                    s11 << r12
                  else
                    break
                  end
                end
                r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                s0 << r11
                if r11
                  if has_terminal?('>', false, index)
                    r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('>')
                    r13 = nil
                  end
                  s0 << r13
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(VCDOMAINTYPE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:V_C_DOMAIN_TYPE][start_index] = r0

    r0
  end

  def _nt_V_ASSETION_TEXT
    start_index = index
    if node_cache[:V_ASSETION_TEXT].has_key?(index)
      cached = node_cache[:V_ASSETION_TEXT][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_assertions

    node_cache[:V_ASSETION_TEXT][start_index] = r0

    r0
  end

  def _nt_assertions
    start_index = index
    if node_cache[:assertions].has_key?(index)
      cached = node_cache[:assertions][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_assertion
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:assertions][start_index] = r0

    r0
  end

  module Assertion0
    def any_identifier
      elements[0]
    end

  end

  module Assertion1
    def boolean_expression
      elements[1]
    end

    def space
      elements[2]
    end
  end

  def _nt_assertion
    start_index = index
    if node_cache[:assertion].has_key?(index)
      cached = node_cache[:assertion][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2, s2 = index, []
    r3 = _nt_any_identifier
    s2 << r3
    if r3
      if has_terminal?(':', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(':')
        r4 = nil
      end
      s2 << r4
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(Assertion0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r5 = _nt_boolean_expression
      s0 << r5
      if r5
        r6 = _nt_space
        s0 << r6
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Assertion1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:assertion][start_index] = r0

    r0
  end

  def _nt_boolean_expression
    start_index = index
    if node_cache[:boolean_expression].has_key?(index)
      cached = node_cache[:boolean_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_boolean_node

    node_cache[:boolean_expression][start_index] = r0

    r0
  end

  module BooleanNode0
    def SYM_EXISTS
      elements[0]
    end

    def absolute_path
      elements[1]
    end
  end

  module BooleanNode1
    def relative_path
      elements[0]
    end

    def white_space
      elements[1]
    end

    def SYM_MATCHES
      elements[2]
    end

    def SYM_START_CBLOCK
      elements[3]
    end

    def c_primitive
      elements[4]
    end

    def SYM_END_CBLOCK
      elements[5]
    end
  end

  module BooleanNode2
    def SYM_NOT
      elements[0]
    end

    def boolean_leaf
      elements[1]
    end
  end

  module BooleanNode3
    def arithmetic_expression1
      elements[0]
    end

    def arithmetic_expression2
      elements[2]
    end
  end

  module BooleanNode4
    def boolean_leaf
      elements[1]
    end
  end

  module BooleanNode5
    def boolean_leaf
      elements[0]
    end

  end

  def _nt_boolean_node
    start_index = index
    if node_cache[:boolean_node].has_key?(index)
      cached = node_cache[:boolean_node][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_SYM_EXISTS
    s1 << r2
    if r2
      r3 = _nt_absolute_path
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(BooleanNode0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i4, s4 = index, []
      r5 = _nt_relative_path
      s4 << r5
      if r5
        r6 = _nt_white_space
        s4 << r6
        if r6
          r7 = _nt_SYM_MATCHES
          s4 << r7
          if r7
            r8 = _nt_SYM_START_CBLOCK
            s4 << r8
            if r8
              r9 = _nt_c_primitive
              s4 << r9
              if r9
                r10 = _nt_SYM_END_CBLOCK
                s4 << r10
              end
            end
          end
        end
      end
      if s4.last
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        r4.extend(BooleanNode1)
      else
        @index = i4
        r4 = nil
      end
      if r4
        r0 = r4
      else
        i11, s11 = index, []
        r12 = _nt_SYM_NOT
        s11 << r12
        if r12
          r13 = _nt_boolean_leaf
          s11 << r13
        end
        if s11.last
          r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
          r11.extend(BooleanNode2)
        else
          @index = i11
          r11 = nil
        end
        if r11
          r0 = r11
        else
          i14, s14 = index, []
          r15 = _nt_arithmetic_expression
          s14 << r15
          if r15
            i16 = index
            r17 = _nt_SYM_EQ
            if r17
              r16 = r17
            else
              r18 = _nt_SYM_NE
              if r18
                r16 = r18
              else
                r19 = _nt_SYM_LT
                if r19
                  r16 = r19
                else
                  r20 = _nt_SYM_GT
                  if r20
                    r16 = r20
                  else
                    r21 = _nt_SYM_LE
                    if r21
                      r16 = r21
                    else
                      r22 = _nt_SYM_GE
                      if r22
                        r16 = r22
                      else
                        @index = i16
                        r16 = nil
                      end
                    end
                  end
                end
              end
            end
            s14 << r16
            if r16
              r23 = _nt_arithmetic_expression
              s14 << r23
            end
          end
          if s14.last
            r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
            r14.extend(BooleanNode3)
          else
            @index = i14
            r14 = nil
          end
          if r14
            r0 = r14
          else
            i24, s24 = index, []
            r25 = _nt_boolean_leaf
            s24 << r25
            if r25
              i27, s27 = index, []
              i28 = index
              r29 = _nt_SYM_AND
              if r29
                r28 = r29
              else
                r30 = _nt_SYM_OR
                if r30
                  r28 = r30
                else
                  r31 = _nt_SYM_XOR
                  if r31
                    r28 = r31
                  else
                    r32 = _nt_SYM_IMPLIES
                    if r32
                      r28 = r32
                    else
                      @index = i28
                      r28 = nil
                    end
                  end
                end
              end
              s27 << r28
              if r28
                r33 = _nt_boolean_leaf
                s27 << r33
              end
              if s27.last
                r27 = instantiate_node(SyntaxNode,input, i27...index, s27)
                r27.extend(BooleanNode4)
              else
                @index = i27
                r27 = nil
              end
              if r27
                r26 = r27
              else
                r26 = instantiate_node(SyntaxNode,input, index...index)
              end
              s24 << r26
            end
            if s24.last
              r24 = instantiate_node(SyntaxNode,input, i24...index, s24)
              r24.extend(BooleanNode5)
            else
              @index = i24
              r24 = nil
            end
            if r24
              r0 = r24
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end
    end

    node_cache[:boolean_node][start_index] = r0

    r0
  end

  module BooleanLeaf0
    def boolean_expression
      elements[1]
    end

  end

  def _nt_boolean_leaf
    start_index = index
    if node_cache[:boolean_leaf].has_key?(index)
      cached = node_cache[:boolean_leaf][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('(', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_boolean_expression
      s1 << r3
      if r3
        if has_terminal?(')', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(')')
          r4 = nil
        end
        s1 << r4
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(BooleanLeaf0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r5 = _nt_SYM_TRUE
      if r5
        r0 = r5
      else
        r6 = _nt_SYM_FALSE
        if r6
          r0 = r6
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:boolean_leaf][start_index] = r0

    r0
  end

  def _nt_arithmetic_expression
    start_index = index
    if node_cache[:arithmetic_expression].has_key?(index)
      cached = node_cache[:arithmetic_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_arithmetic_node

    node_cache[:arithmetic_expression][start_index] = r0

    r0
  end

  module ArithmeticNode0
    def arithmetic_leaf
      elements[1]
    end
  end

  module ArithmeticNode1
    def arithmetic_leaf
      elements[0]
    end

  end

  def _nt_arithmetic_node
    start_index = index
    if node_cache[:arithmetic_node].has_key?(index)
      cached = node_cache[:arithmetic_node][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_arithmetic_leaf
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        if has_terminal?('+', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('+')
          r5 = nil
        end
        if r5
          r4 = r5
        else
          if has_terminal?('-', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('-')
            r6 = nil
          end
          if r6
            r4 = r6
          else
            if has_terminal?('*', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('*')
              r7 = nil
            end
            if r7
              r4 = r7
            else
              if has_terminal?('/', false, index)
                r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('/')
                r8 = nil
              end
              if r8
                r4 = r8
              else
                if has_terminal?('^', false, index)
                  r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('^')
                  r9 = nil
                end
                if r9
                  r4 = r9
                else
                  @index = i4
                  r4 = nil
                end
              end
            end
          end
        end
        s3 << r4
        if r4
          r10 = _nt_arithmetic_leaf
          s3 << r10
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(ArithmeticNode0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ArithmeticNode1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:arithmetic_node][start_index] = r0

    r0
  end

  module ArithmeticLeaf0
    def arithmetic_expression
      elements[1]
    end

  end

  def _nt_arithmetic_leaf
    start_index = index
    if node_cache[:arithmetic_leaf].has_key?(index)
      cached = node_cache[:arithmetic_leaf][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('(', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_arithmetic_expression
      s1 << r3
      if r3
        if has_terminal?(')', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(')')
          r4 = nil
        end
        s1 << r4
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(ArithmeticLeaf0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r5 = _nt_integer_value
      if r5
        r0 = r5
      else
        r6 = _nt_real_value
        if r6
          r0 = r6
        else
          r7 = _nt_absolute_path
          if r7
            r0 = r7
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:arithmetic_leaf][start_index] = r0

    r0
  end

  module MovablePath0
    def SYM_MOVABLE_LEADER
      elements[0]
    end

    def relative_path
      elements[1]
    end
  end

  def _nt_movable_path
    start_index = index
    if node_cache[:movable_path].has_key?(index)
      cached = node_cache[:movable_path][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_SYM_MOVABLE_LEADER
    s0 << r1
    if r1
      r2 = _nt_relative_path
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(MovablePath0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:movable_path][start_index] = r0

    r0
  end

  module AbsolutePath0
  end

  def _nt_absolute_path
    start_index = index
    if node_cache[:absolute_path].has_key?(index)
      cached = node_cache[:absolute_path][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('/', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('/')
      r1 = nil
    end
    s0 << r1
    if r1
      r3 = _nt_relative_path
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(AbsolutePath0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:absolute_path][start_index] = r0

    r0
  end

  module RelativePath0
    def path_segment
      elements[1]
    end
  end

  module RelativePath1
    def path_segment
      elements[0]
    end

  end

  def _nt_relative_path
    start_index = index
    if node_cache[:relative_path].has_key?(index)
      cached = node_cache[:relative_path][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_path_segment
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        if has_terminal?('/', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('/')
          r4 = nil
        end
        s3 << r4
        if r4
          r5 = _nt_path_segment
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(RelativePath0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(RelativePath1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:relative_path][start_index] = r0

    r0
  end

  module PathSegment0
    def V_ATTRIBUTE_IDENTIFIER
      elements[0]
    end

  end

  def _nt_path_segment
    start_index = index
    if node_cache[:path_segment].has_key?(index)
      cached = node_cache[:path_segment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_V_ATTRIBUTE_IDENTIFIER
    s0 << r1
    if r1
      r3 = _nt_V_LOCAL_TERM_CODE_REF
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(PathSegment0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:path_segment][start_index] = r0

    r0
  end

  def _nt_SYM_MOVABLE_LEADER
    start_index = index
    if node_cache[:SYM_MOVABLE_LEADER].has_key?(index)
      cached = node_cache[:SYM_MOVABLE_LEADER][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('//', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('//')
      r0 = nil
    end

    node_cache[:SYM_MOVABLE_LEADER][start_index] = r0

    r0
  end

end

class CADLParser < Treetop::Runtime::CompiledParser
  include CADL
end

