# Autogenerated from a Treetop grammar. Edits may be lost.


module SharedToken
  include Treetop::Runtime

  def root
    @root ||= :any_identifier
  end

  def _nt_any_identifier
    start_index = index
    if node_cache[:any_identifier].has_key?(index)
      cached = node_cache[:any_identifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_type_identifier
    if r1
      r0 = r1
    else
      r2 = _nt_V_ATTRIBUTE_IDENTIFIER
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:any_identifier][start_index] = r0

    r0
  end

  module TypeIdentifier0
    def V_TYPE_IDENTIFIER
      elements[1]
    end

  end

  module TypeIdentifier1
    def V_GENERIC_TYPE_IDENTIFIER
      elements[1]
    end

  end

  def _nt_type_identifier
    start_index = index
    if node_cache[:type_identifier].has_key?(index)
      cached = node_cache[:type_identifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('(', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_V_TYPE_IDENTIFIER
      s1 << r3
      if r3
        if has_terminal?(')', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(')')
          r4 = nil
        end
        s1 << r4
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(TypeIdentifier0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i5, s5 = index, []
      if has_terminal?('(', false, index)
        r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('(')
        r6 = nil
      end
      s5 << r6
      if r6
        r7 = _nt_V_GENERIC_TYPE_IDENTIFIER
        s5 << r7
        if r7
          if has_terminal?(')', false, index)
            r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(')')
            r8 = nil
          end
          s5 << r8
        end
      end
      if s5.last
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        r5.extend(TypeIdentifier1)
      else
        @index = i5
        r5 = nil
      end
      if r5
        r0 = r5
      else
        r9 = _nt_V_TYPE_IDENTIFIER
        if r9
          r0 = r9
        else
          r10 = _nt_V_GENERIC_TYPE_IDENTIFIER
          if r10
            r0 = r10
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:type_identifier][start_index] = r0

    r0
  end

  def _nt_boolean_value
    start_index = index
    if node_cache[:boolean_value].has_key?(index)
      cached = node_cache[:boolean_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_SYM_TRUE
    if r1
      r0 = r1
    else
      r2 = _nt_SYM_FALSE
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:boolean_value][start_index] = r0

    r0
  end

  module BooleanListValue0
    def boolean_value
      elements[1]
    end
  end

  module BooleanListValue1
    def boolean_value
      elements[0]
    end

  end

  module BooleanListValue2
    def boolean_value
      elements[0]
    end

    def SYM_LIST_CONTINUE
      elements[2]
    end
  end

  def _nt_boolean_list_value
    start_index = index
    if node_cache[:boolean_list_value].has_key?(index)
      cached = node_cache[:boolean_list_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_boolean_value
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        if has_terminal?(',', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r5 = nil
        end
        s4 << r5
        if r5
          r6 = _nt_boolean_value
          s4 << r6
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(BooleanListValue0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(BooleanListValue1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i7, s7 = index, []
      r8 = _nt_boolean_value
      s7 << r8
      if r8
        if has_terminal?(',', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r9 = nil
        end
        s7 << r9
        if r9
          r10 = _nt_SYM_LIST_CONTINUE
          s7 << r10
        end
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(BooleanListValue2)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:boolean_list_value][start_index] = r0

    r0
  end

  module IntegerValue0
    def V_INTEGER
      elements[1]
    end
  end

  def _nt_integer_value
    start_index = index
    if node_cache[:integer_value].has_key?(index)
      cached = node_cache[:integer_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2 = index
    if has_terminal?('+', false, index)
      r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('+')
      r3 = nil
    end
    if r3
      r2 = r3
    else
      if has_terminal?('-', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('-')
        r4 = nil
      end
      if r4
        r2 = r4
      else
        @index = i2
        r2 = nil
      end
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r5 = _nt_V_INTEGER
      s0 << r5
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(IntegerValue0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:integer_value][start_index] = r0

    r0
  end

  module IntegerListValue0
    def white_space
      elements[1]
    end

    def integer_value
      elements[2]
    end
  end

  module IntegerListValue1
    def integer_value
      elements[0]
    end

  end

  module IntegerListValue2
    def integer_value
      elements[0]
    end

    def white_space
      elements[2]
    end

    def SYM_LIST_CONTINUE
      elements[3]
    end
  end

  def _nt_integer_list_value
    start_index = index
    if node_cache[:integer_list_value].has_key?(index)
      cached = node_cache[:integer_list_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_integer_value
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        if has_terminal?(',', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r5 = nil
        end
        s4 << r5
        if r5
          r6 = _nt_white_space
          s4 << r6
          if r6
            r7 = _nt_integer_value
            s4 << r7
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(IntegerListValue0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(IntegerListValue1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i8, s8 = index, []
      r9 = _nt_integer_value
      s8 << r9
      if r9
        if has_terminal?(',', false, index)
          r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r10 = nil
        end
        s8 << r10
        if r10
          r11 = _nt_white_space
          s8 << r11
          if r11
            r12 = _nt_SYM_LIST_CONTINUE
            s8 << r12
          end
        end
      end
      if s8.last
        r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
        r8.extend(IntegerListValue2)
      else
        @index = i8
        r8 = nil
      end
      if r8
        r0 = r8
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:integer_list_value][start_index] = r0

    r0
  end

  module IntegerIntervalValue0
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def integer_value1
      elements[2]
    end

    def SYM_ELLIPSIS
      elements[3]
    end

    def integer_value2
      elements[5]
    end

    def SYM_INTERVAL_DELIM2
      elements[6]
    end
  end

  module IntegerIntervalValue1
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def integer_value
      elements[2]
    end

    def SYM_INTERVAL_DELIM2
      elements[3]
    end
  end

  def _nt_integer_interval_value
    start_index = index
    if node_cache[:integer_interval_value].has_key?(index)
      cached = node_cache[:integer_interval_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_SYM_INTERVAL_DELIM
    s1 << r2
    if r2
      r4 = _nt_SYM_GT
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_integer_value
        s1 << r5
        if r5
          r6 = _nt_SYM_ELLIPSIS
          s1 << r6
          if r6
            r8 = _nt_SYM_LT
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r7
            if r7
              r9 = _nt_integer_value
              s1 << r9
              if r9
                r10 = _nt_SYM_INTERVAL_DELIM
                s1 << r10
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(IntegerIntervalValue0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i11, s11 = index, []
      r12 = _nt_SYM_INTERVAL_DELIM
      s11 << r12
      if r12
        i14 = index
        r15 = _nt_SYM_LT
        if r15
          r14 = r15
        else
          r16 = _nt_SYM_LE
          if r16
            r14 = r16
          else
            r17 = _nt_SYM_GT
            if r17
              r14 = r17
            else
              r18 = _nt_SYM_GE
              if r18
                r14 = r18
              else
                @index = i14
                r14 = nil
              end
            end
          end
        end
        if r14
          r13 = r14
        else
          r13 = instantiate_node(SyntaxNode,input, index...index)
        end
        s11 << r13
        if r13
          r19 = _nt_integer_value
          s11 << r19
          if r19
            r20 = _nt_SYM_INTERVAL_DELIM
            s11 << r20
          end
        end
      end
      if s11.last
        r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
        r11.extend(IntegerIntervalValue1)
      else
        @index = i11
        r11 = nil
      end
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:integer_interval_value][start_index] = r0

    r0
  end

  module RealValue0
    def V_REAL
      elements[1]
    end
  end

  def _nt_real_value
    start_index = index
    if node_cache[:real_value].has_key?(index)
      cached = node_cache[:real_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('+', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('+')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('-', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('-')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r4 = _nt_V_REAL
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(RealValue0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:real_value][start_index] = r0

    r0
  end

  module RealListValue0
    def white_space
      elements[1]
    end

    def real_value
      elements[2]
    end
  end

  module RealListValue1
    def real_value
      elements[0]
    end

  end

  module RealListValue2
    def real_value
      elements[0]
    end

    def white_space
      elements[2]
    end

    def SYM_LIST_CONTINUE
      elements[3]
    end
  end

  def _nt_real_list_value
    start_index = index
    if node_cache[:real_list_value].has_key?(index)
      cached = node_cache[:real_list_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_real_value
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        if has_terminal?(',', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r5 = nil
        end
        s4 << r5
        if r5
          r6 = _nt_white_space
          s4 << r6
          if r6
            r7 = _nt_real_value
            s4 << r7
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(RealListValue0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(RealListValue1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i8, s8 = index, []
      r9 = _nt_real_value
      s8 << r9
      if r9
        if has_terminal?(',', false, index)
          r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r10 = nil
        end
        s8 << r10
        if r10
          r11 = _nt_white_space
          s8 << r11
          if r11
            r12 = _nt_SYM_LIST_CONTINUE
            s8 << r12
          end
        end
      end
      if s8.last
        r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
        r8.extend(RealListValue2)
      else
        @index = i8
        r8 = nil
      end
      if r8
        r0 = r8
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:real_list_value][start_index] = r0

    r0
  end

  module RealIntervalValue0
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def real_value1
      elements[2]
    end

    def SYM_ELLIPSIS
      elements[3]
    end

    def real_value2
      elements[5]
    end

    def SYM_INTERVAL_DELIM2
      elements[6]
    end
  end

  module RealIntervalValue1
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def real_value
      elements[2]
    end

    def SYM_INTERVAL_DELIM2
      elements[3]
    end
  end

  module RealIntervalValue2
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def real_value
      elements[1]
    end

    def SYM_INTERVAL_DELIM2
      elements[2]
    end
  end

  def _nt_real_interval_value
    start_index = index
    if node_cache[:real_interval_value].has_key?(index)
      cached = node_cache[:real_interval_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_SYM_INTERVAL_DELIM
    s1 << r2
    if r2
      r4 = _nt_SYM_GT
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_real_value
        s1 << r5
        if r5
          r6 = _nt_SYM_ELLIPSIS
          s1 << r6
          if r6
            r8 = _nt_SYM_LT
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r7
            if r7
              r9 = _nt_real_value
              s1 << r9
              if r9
                r10 = _nt_SYM_INTERVAL_DELIM
                s1 << r10
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(RealIntervalValue0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i11, s11 = index, []
      r12 = _nt_SYM_INTERVAL_DELIM
      s11 << r12
      if r12
        i14 = index
        r15 = _nt_SYM_LT
        if r15
          r14 = r15
        else
          r16 = _nt_SYM_LE
          if r16
            r14 = r16
          else
            r17 = _nt_SYM_GT
            if r17
              r14 = r17
            else
              r18 = _nt_SYM_GE
              if r18
                r14 = r18
              else
                @index = i14
                r14 = nil
              end
            end
          end
        end
        if r14
          r13 = r14
        else
          r13 = instantiate_node(SyntaxNode,input, index...index)
        end
        s11 << r13
        if r13
          r19 = _nt_real_value
          s11 << r19
          if r19
            r20 = _nt_SYM_INTERVAL_DELIM
            s11 << r20
          end
        end
      end
      if s11.last
        r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
        r11.extend(RealIntervalValue1)
      else
        @index = i11
        r11 = nil
      end
      if r11
        r0 = r11
      else
        i21, s21 = index, []
        r22 = _nt_SYM_INTERVAL_DELIM
        s21 << r22
        if r22
          r23 = _nt_real_value
          s21 << r23
          if r23
            r24 = _nt_SYM_INTERVAL_DELIM
            s21 << r24
          end
        end
        if s21.last
          r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
          r21.extend(RealIntervalValue2)
        else
          @index = i21
          r21 = nil
        end
        if r21
          r0 = r21
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:real_interval_value][start_index] = r0

    r0
  end

  def _nt_character_value
    start_index = index
    if node_cache[:character_value].has_key?(index)
      cached = node_cache[:character_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_V_CHAR

    node_cache[:character_value][start_index] = r0

    r0
  end

  module CharacterListValue0
    def character_value
      elements[1]
    end
  end

  module CharacterListValue1
    def character_value
      elements[0]
    end

  end

  module CharacterListValue2
    def character_value
      elements[0]
    end

    def SYM_LIST_CONTINUE
      elements[2]
    end
  end

  def _nt_character_list_value
    start_index = index
    if node_cache[:character_list_value].has_key?(index)
      cached = node_cache[:character_list_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_character_value
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        if has_terminal?(',', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r5 = nil
        end
        s4 << r5
        if r5
          r6 = _nt_character_value
          s4 << r6
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(CharacterListValue0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(CharacterListValue1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i7, s7 = index, []
      r8 = _nt_character_value
      s7 << r8
      if r8
        if has_terminal?(',', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r9 = nil
        end
        s7 << r9
        if r9
          r10 = _nt_SYM_LIST_CONTINUE
          s7 << r10
        end
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(CharacterListValue2)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:character_list_value][start_index] = r0

    r0
  end

  def _nt_string_value
    start_index = index
    if node_cache[:string_value].has_key?(index)
      cached = node_cache[:string_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_V_STRING

    node_cache[:string_value][start_index] = r0

    r0
  end

  module StringListValue0
    def white_space
      elements[1]
    end

    def V_STRING
      elements[2]
    end
  end

  module StringListValue1
    def V_STRING
      elements[0]
    end

  end

  module StringListValue2
    def V_STRING
      elements[0]
    end

    def white_space
      elements[2]
    end

    def SYM_LIST_CONTINUE
      elements[3]
    end
  end

  def _nt_string_list_value
    start_index = index
    if node_cache[:string_list_value].has_key?(index)
      cached = node_cache[:string_list_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_V_STRING
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        if has_terminal?(',', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r5 = nil
        end
        s4 << r5
        if r5
          r6 = _nt_white_space
          s4 << r6
          if r6
            r7 = _nt_V_STRING
            s4 << r7
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(StringListValue0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(StringListValue1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i8, s8 = index, []
      r9 = _nt_V_STRING
      s8 << r9
      if r9
        if has_terminal?(',', false, index)
          r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r10 = nil
        end
        s8 << r10
        if r10
          r11 = _nt_white_space
          s8 << r11
          if r11
            r12 = _nt_SYM_LIST_CONTINUE
            s8 << r12
          end
        end
      end
      if s8.last
        r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
        r8.extend(StringListValue2)
      else
        @index = i8
        r8 = nil
      end
      if r8
        r0 = r8
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:string_list_value][start_index] = r0

    r0
  end

  def _nt_date_value
    start_index = index
    if node_cache[:date_value].has_key?(index)
      cached = node_cache[:date_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_V_ISO8601_EXTENDED_DATE

    node_cache[:date_value][start_index] = r0

    r0
  end

  module DateListValue0
    def date_value
      elements[1]
    end
  end

  module DateListValue1
    def date_value
      elements[0]
    end

  end

  module DateListValue2
    def date_value
      elements[0]
    end

    def SYM_LIST_CONTINUE
      elements[2]
    end
  end

  def _nt_date_list_value
    start_index = index
    if node_cache[:date_list_value].has_key?(index)
      cached = node_cache[:date_list_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_date_value
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        if has_terminal?(',', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r5 = nil
        end
        s4 << r5
        if r5
          r6 = _nt_date_value
          s4 << r6
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(DateListValue0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(DateListValue1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i7, s7 = index, []
      r8 = _nt_date_value
      s7 << r8
      if r8
        if has_terminal?(',', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r9 = nil
        end
        s7 << r9
        if r9
          r10 = _nt_SYM_LIST_CONTINUE
          s7 << r10
        end
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(DateListValue2)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:date_list_value][start_index] = r0

    r0
  end

  module DateIntervalValue0
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def date_value1
      elements[2]
    end

    def SYM_ELLIPSIS
      elements[3]
    end

    def date_value2
      elements[5]
    end

    def SYM_INTERVAL_DELIM2
      elements[6]
    end
  end

  module DateIntervalValue1
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def date_value
      elements[2]
    end

    def SYM_INTERVAL_DELIM2
      elements[3]
    end
  end

  def _nt_date_interval_value
    start_index = index
    if node_cache[:date_interval_value].has_key?(index)
      cached = node_cache[:date_interval_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_SYM_INTERVAL_DELIM
    s1 << r2
    if r2
      r4 = _nt_SYM_GT
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_date_value
        s1 << r5
        if r5
          r6 = _nt_SYM_ELLIPSIS
          s1 << r6
          if r6
            r8 = _nt_SYM_LT
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r7
            if r7
              r9 = _nt_date_value
              s1 << r9
              if r9
                r10 = _nt_SYM_INTERVAL_DELIM
                s1 << r10
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(DateIntervalValue0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i11, s11 = index, []
      r12 = _nt_SYM_INTERVAL_DELIM
      s11 << r12
      if r12
        i14 = index
        r15 = _nt_SYM_LT
        if r15
          r14 = r15
        else
          r16 = _nt_SYM_LE
          if r16
            r14 = r16
          else
            r17 = _nt_SYM_GT
            if r17
              r14 = r17
            else
              r18 = _nt_SYM_GE
              if r18
                r14 = r18
              else
                @index = i14
                r14 = nil
              end
            end
          end
        end
        if r14
          r13 = r14
        else
          r13 = instantiate_node(SyntaxNode,input, index...index)
        end
        s11 << r13
        if r13
          r19 = _nt_date_value
          s11 << r19
          if r19
            r20 = _nt_SYM_INTERVAL_DELIM
            s11 << r20
          end
        end
      end
      if s11.last
        r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
        r11.extend(DateIntervalValue1)
      else
        @index = i11
        r11 = nil
      end
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:date_interval_value][start_index] = r0

    r0
  end

  def _nt_time_value
    start_index = index
    if node_cache[:time_value].has_key?(index)
      cached = node_cache[:time_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_V_ISO8601_EXTENDED_TIME

    node_cache[:time_value][start_index] = r0

    r0
  end

  module TimeListValue0
    def time_value
      elements[1]
    end
  end

  module TimeListValue1
    def time_value
      elements[0]
    end

  end

  module TimeListValue2
    def time_value
      elements[0]
    end

    def SYM_LIST_CONTINUE
      elements[2]
    end
  end

  def _nt_time_list_value
    start_index = index
    if node_cache[:time_list_value].has_key?(index)
      cached = node_cache[:time_list_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_time_value
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        if has_terminal?(',', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r5 = nil
        end
        s4 << r5
        if r5
          r6 = _nt_time_value
          s4 << r6
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(TimeListValue0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(TimeListValue1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i7, s7 = index, []
      r8 = _nt_time_value
      s7 << r8
      if r8
        if has_terminal?(',', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r9 = nil
        end
        s7 << r9
        if r9
          r10 = _nt_SYM_LIST_CONTINUE
          s7 << r10
        end
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(TimeListValue2)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:time_list_value][start_index] = r0

    r0
  end

  module TimeIntervalValue0
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def time_value1
      elements[2]
    end

    def SYM_ELLIPSIS
      elements[3]
    end

    def time_value2
      elements[5]
    end

    def SYM_INTERVAL_DELIM2
      elements[6]
    end
  end

  module TimeIntervalValue1
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def time_value
      elements[2]
    end

    def SYM_INTERVAL_DELIM2
      elements[3]
    end
  end

  def _nt_time_interval_value
    start_index = index
    if node_cache[:time_interval_value].has_key?(index)
      cached = node_cache[:time_interval_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_SYM_INTERVAL_DELIM
    s1 << r2
    if r2
      r4 = _nt_SYM_GT
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_time_value
        s1 << r5
        if r5
          r6 = _nt_SYM_ELLIPSIS
          s1 << r6
          if r6
            r8 = _nt_SYM_LT
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r7
            if r7
              r9 = _nt_time_value
              s1 << r9
              if r9
                r10 = _nt_SYM_INTERVAL_DELIM
                s1 << r10
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(TimeIntervalValue0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i11, s11 = index, []
      r12 = _nt_SYM_INTERVAL_DELIM
      s11 << r12
      if r12
        i14 = index
        r15 = _nt_SYM_LT
        if r15
          r14 = r15
        else
          r16 = _nt_SYM_LE
          if r16
            r14 = r16
          else
            r17 = _nt_SYM_GT
            if r17
              r14 = r17
            else
              r18 = _nt_SYM_GE
              if r18
                r14 = r18
              else
                @index = i14
                r14 = nil
              end
            end
          end
        end
        if r14
          r13 = r14
        else
          r13 = instantiate_node(SyntaxNode,input, index...index)
        end
        s11 << r13
        if r13
          r19 = _nt_time_value
          s11 << r19
          if r19
            r20 = _nt_SYM_INTERVAL_DELIM
            s11 << r20
          end
        end
      end
      if s11.last
        r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
        r11.extend(TimeIntervalValue1)
      else
        @index = i11
        r11 = nil
      end
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:time_interval_value][start_index] = r0

    r0
  end

  def _nt_date_time_value
    start_index = index
    if node_cache[:date_time_value].has_key?(index)
      cached = node_cache[:date_time_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_V_ISO8601_EXTENDED_DATE_TIME

    node_cache[:date_time_value][start_index] = r0

    r0
  end

  module DateTimeListValue0
    def date_time_value
      elements[1]
    end
  end

  module DateTimeListValue1
    def date_time_value
      elements[0]
    end

  end

  module DateTimeListValue2
    def date_time_value
      elements[0]
    end

    def SYM_LIST_CONTINUE
      elements[2]
    end
  end

  def _nt_date_time_list_value
    start_index = index
    if node_cache[:date_time_list_value].has_key?(index)
      cached = node_cache[:date_time_list_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_date_time_value
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        if has_terminal?(',', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r5 = nil
        end
        s4 << r5
        if r5
          r6 = _nt_date_time_value
          s4 << r6
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(DateTimeListValue0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(DateTimeListValue1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i7, s7 = index, []
      r8 = _nt_date_time_value
      s7 << r8
      if r8
        if has_terminal?(',', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r9 = nil
        end
        s7 << r9
        if r9
          r10 = _nt_SYM_LIST_CONTINUE
          s7 << r10
        end
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(DateTimeListValue2)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:date_time_list_value][start_index] = r0

    r0
  end

  module DateTimeIntervalValue0
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def date_time_value1
      elements[1]
    end

    def SYM_ELLIPSIS
      elements[2]
    end

    def date_time_value2
      elements[3]
    end

    def SYM_INTERVAL_DELIM2
      elements[4]
    end
  end

  module DateTimeIntervalValue1
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def SYM_GT
      elements[1]
    end

    def date_time_value1
      elements[2]
    end

    def SYM_ELLIPSIS
      elements[3]
    end

    def date_time_value2
      elements[4]
    end

    def SYM_INTERVAL_DELIM2
      elements[5]
    end
  end

  module DateTimeIntervalValue2
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def date_time_value1
      elements[1]
    end

    def SYM_ELLIPSIS
      elements[2]
    end

    def SYM_LT
      elements[3]
    end

    def date_time_value2
      elements[4]
    end

    def SYM_INTERVAL_DELIM2
      elements[5]
    end
  end

  module DateTimeIntervalValue3
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def SYM_GT
      elements[1]
    end

    def date_time_value1
      elements[2]
    end

    def SYM_ELLIPSIS
      elements[3]
    end

    def SYM_LT
      elements[4]
    end

    def date_time_value2
      elements[5]
    end

    def SYM_INTERVAL_DELIM2
      elements[6]
    end
  end

  module DateTimeIntervalValue4
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def SYM_LT
      elements[1]
    end

    def date_time_value
      elements[2]
    end

    def SYM_INTERVAL_DELIM2
      elements[3]
    end
  end

  module DateTimeIntervalValue5
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def SYM_LE
      elements[1]
    end

    def date_time_value
      elements[2]
    end

    def SYM_INTERVAL_DELIM2
      elements[3]
    end
  end

  module DateTimeIntervalValue6
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def SYM_GT
      elements[1]
    end

    def date_time_value
      elements[2]
    end

    def SYM_INTERVAL_DELIM2
      elements[3]
    end
  end

  module DateTimeIntervalValue7
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def SYM_GE
      elements[1]
    end

    def date_time_value
      elements[2]
    end

    def SYM_INTERVAL_DELIM2
      elements[3]
    end
  end

  module DateTimeIntervalValue8
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def date_time_value
      elements[1]
    end

    def SYM_INTERVAL_DELIM2
      elements[2]
    end
  end

  def _nt_date_time_interval_value
    start_index = index
    if node_cache[:date_time_interval_value].has_key?(index)
      cached = node_cache[:date_time_interval_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_SYM_INTERVAL_DELIM
    s1 << r2
    if r2
      r3 = _nt_date_time_value
      s1 << r3
      if r3
        r4 = _nt_SYM_ELLIPSIS
        s1 << r4
        if r4
          r5 = _nt_date_time_value
          s1 << r5
          if r5
            r6 = _nt_SYM_INTERVAL_DELIM
            s1 << r6
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(DateTimeIntervalValue0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i7, s7 = index, []
      r8 = _nt_SYM_INTERVAL_DELIM
      s7 << r8
      if r8
        r9 = _nt_SYM_GT
        s7 << r9
        if r9
          r10 = _nt_date_time_value
          s7 << r10
          if r10
            r11 = _nt_SYM_ELLIPSIS
            s7 << r11
            if r11
              r12 = _nt_date_time_value
              s7 << r12
              if r12
                r13 = _nt_SYM_INTERVAL_DELIM
                s7 << r13
              end
            end
          end
        end
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(DateTimeIntervalValue1)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
      else
        i14, s14 = index, []
        r15 = _nt_SYM_INTERVAL_DELIM
        s14 << r15
        if r15
          r16 = _nt_date_time_value
          s14 << r16
          if r16
            r17 = _nt_SYM_ELLIPSIS
            s14 << r17
            if r17
              r18 = _nt_SYM_LT
              s14 << r18
              if r18
                r19 = _nt_date_time_value
                s14 << r19
                if r19
                  r20 = _nt_SYM_INTERVAL_DELIM
                  s14 << r20
                end
              end
            end
          end
        end
        if s14.last
          r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
          r14.extend(DateTimeIntervalValue2)
        else
          @index = i14
          r14 = nil
        end
        if r14
          r0 = r14
        else
          i21, s21 = index, []
          r22 = _nt_SYM_INTERVAL_DELIM
          s21 << r22
          if r22
            r23 = _nt_SYM_GT
            s21 << r23
            if r23
              r24 = _nt_date_time_value
              s21 << r24
              if r24
                r25 = _nt_SYM_ELLIPSIS
                s21 << r25
                if r25
                  r26 = _nt_SYM_LT
                  s21 << r26
                  if r26
                    r27 = _nt_date_time_value
                    s21 << r27
                    if r27
                      r28 = _nt_SYM_INTERVAL_DELIM
                      s21 << r28
                    end
                  end
                end
              end
            end
          end
          if s21.last
            r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
            r21.extend(DateTimeIntervalValue3)
          else
            @index = i21
            r21 = nil
          end
          if r21
            r0 = r21
          else
            i29, s29 = index, []
            r30 = _nt_SYM_INTERVAL_DELIM
            s29 << r30
            if r30
              r31 = _nt_SYM_LT
              s29 << r31
              if r31
                r32 = _nt_date_time_value
                s29 << r32
                if r32
                  r33 = _nt_SYM_INTERVAL_DELIM
                  s29 << r33
                end
              end
            end
            if s29.last
              r29 = instantiate_node(SyntaxNode,input, i29...index, s29)
              r29.extend(DateTimeIntervalValue4)
            else
              @index = i29
              r29 = nil
            end
            if r29
              r0 = r29
            else
              i34, s34 = index, []
              r35 = _nt_SYM_INTERVAL_DELIM
              s34 << r35
              if r35
                r36 = _nt_SYM_LE
                s34 << r36
                if r36
                  r37 = _nt_date_time_value
                  s34 << r37
                  if r37
                    r38 = _nt_SYM_INTERVAL_DELIM
                    s34 << r38
                  end
                end
              end
              if s34.last
                r34 = instantiate_node(SyntaxNode,input, i34...index, s34)
                r34.extend(DateTimeIntervalValue5)
              else
                @index = i34
                r34 = nil
              end
              if r34
                r0 = r34
              else
                i39, s39 = index, []
                r40 = _nt_SYM_INTERVAL_DELIM
                s39 << r40
                if r40
                  r41 = _nt_SYM_GT
                  s39 << r41
                  if r41
                    r42 = _nt_date_time_value
                    s39 << r42
                    if r42
                      r43 = _nt_SYM_INTERVAL_DELIM
                      s39 << r43
                    end
                  end
                end
                if s39.last
                  r39 = instantiate_node(SyntaxNode,input, i39...index, s39)
                  r39.extend(DateTimeIntervalValue6)
                else
                  @index = i39
                  r39 = nil
                end
                if r39
                  r0 = r39
                else
                  i44, s44 = index, []
                  r45 = _nt_SYM_INTERVAL_DELIM
                  s44 << r45
                  if r45
                    r46 = _nt_SYM_GE
                    s44 << r46
                    if r46
                      r47 = _nt_date_time_value
                      s44 << r47
                      if r47
                        r48 = _nt_SYM_INTERVAL_DELIM
                        s44 << r48
                      end
                    end
                  end
                  if s44.last
                    r44 = instantiate_node(SyntaxNode,input, i44...index, s44)
                    r44.extend(DateTimeIntervalValue7)
                  else
                    @index = i44
                    r44 = nil
                  end
                  if r44
                    r0 = r44
                  else
                    i49, s49 = index, []
                    r50 = _nt_SYM_INTERVAL_DELIM
                    s49 << r50
                    if r50
                      r51 = _nt_date_time_value
                      s49 << r51
                      if r51
                        r52 = _nt_SYM_INTERVAL_DELIM
                        s49 << r52
                      end
                    end
                    if s49.last
                      r49 = instantiate_node(SyntaxNode,input, i49...index, s49)
                      r49.extend(DateTimeIntervalValue8)
                    else
                      @index = i49
                      r49 = nil
                    end
                    if r49
                      r0 = r49
                    else
                      @index = i0
                      r0 = nil
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:date_time_interval_value][start_index] = r0

    r0
  end

  def _nt_duration_value
    start_index = index
    if node_cache[:duration_value].has_key?(index)
      cached = node_cache[:duration_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_V_ISO8601_DURATION

    node_cache[:duration_value][start_index] = r0

    r0
  end

  module DurationListValue0
    def duration_value
      elements[1]
    end
  end

  module DurationListValue1
    def duration_value
      elements[0]
    end

  end

  module DurationListValue2
    def duration_value
      elements[0]
    end

    def SYM_LIST_CONTINUE
      elements[2]
    end
  end

  def _nt_duration_list_value
    start_index = index
    if node_cache[:duration_list_value].has_key?(index)
      cached = node_cache[:duration_list_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_duration_value
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        if has_terminal?(',', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r5 = nil
        end
        s4 << r5
        if r5
          r6 = _nt_duration_value
          s4 << r6
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(DurationListValue0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(DurationListValue1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i7, s7 = index, []
      r8 = _nt_duration_value
      s7 << r8
      if r8
        if has_terminal?(',', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r9 = nil
        end
        s7 << r9
        if r9
          r10 = _nt_SYM_LIST_CONTINUE
          s7 << r10
        end
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(DurationListValue2)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:duration_list_value][start_index] = r0

    r0
  end

  module DurationIntervalValue0
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def duration_value1
      elements[1]
    end

    def SYM_ELLIPSIS
      elements[2]
    end

    def duration_value2
      elements[3]
    end

    def SYM_INTERVAL_DELIM2
      elements[4]
    end
  end

  module DurationIntervalValue1
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def SYM_GT
      elements[1]
    end

    def duration_value1
      elements[2]
    end

    def SYM_ELLIPSIS
      elements[3]
    end

    def duration_value2
      elements[4]
    end

    def SYM_INTERVAL_DELIM2
      elements[5]
    end
  end

  module DurationIntervalValue2
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def duration_value1
      elements[1]
    end

    def SYM_ELLIPSIS
      elements[2]
    end

    def SYM_LT
      elements[3]
    end

    def duration_value2
      elements[4]
    end

    def SYM_INTERVAL_DELIM2
      elements[5]
    end
  end

  module DurationIntervalValue3
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def SYM_GT
      elements[1]
    end

    def duration_value1
      elements[2]
    end

    def SYM_ELLIPSIS
      elements[3]
    end

    def SYM_LT
      elements[4]
    end

    def duration_value2
      elements[5]
    end

    def SYM_INTERVAL_DELIM2
      elements[6]
    end
  end

  module DurationIntervalValue4
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def SYM_LT
      elements[1]
    end

    def duration_value
      elements[2]
    end

    def SYM_INTERVAL_DELIM2
      elements[3]
    end
  end

  module DurationIntervalValue5
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def SYM_LE
      elements[1]
    end

    def duration_value
      elements[2]
    end

    def SYM_INTERVAL_DELIM2
      elements[3]
    end
  end

  module DurationIntervalValue6
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def SYM_GT
      elements[1]
    end

    def duration_value
      elements[2]
    end

    def SYM_INTERVAL_DELIM2
      elements[3]
    end
  end

  module DurationIntervalValue7
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def SYM_GE
      elements[1]
    end

    def duration_value
      elements[2]
    end

    def SYM_INTERVAL_DELIM2
      elements[3]
    end
  end

  module DurationIntervalValue8
    def SYM_INTERVAL_DELIM1
      elements[0]
    end

    def duration_value
      elements[1]
    end

    def SYM_INTERVAL_DELIM2
      elements[2]
    end
  end

  def _nt_duration_interval_value
    start_index = index
    if node_cache[:duration_interval_value].has_key?(index)
      cached = node_cache[:duration_interval_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_SYM_INTERVAL_DELIM
    s1 << r2
    if r2
      r3 = _nt_duration_value
      s1 << r3
      if r3
        r4 = _nt_SYM_ELLIPSIS
        s1 << r4
        if r4
          r5 = _nt_duration_value
          s1 << r5
          if r5
            r6 = _nt_SYM_INTERVAL_DELIM
            s1 << r6
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(DurationIntervalValue0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i7, s7 = index, []
      r8 = _nt_SYM_INTERVAL_DELIM
      s7 << r8
      if r8
        r9 = _nt_SYM_GT
        s7 << r9
        if r9
          r10 = _nt_duration_value
          s7 << r10
          if r10
            r11 = _nt_SYM_ELLIPSIS
            s7 << r11
            if r11
              r12 = _nt_duration_value
              s7 << r12
              if r12
                r13 = _nt_SYM_INTERVAL_DELIM
                s7 << r13
              end
            end
          end
        end
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(DurationIntervalValue1)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
      else
        i14, s14 = index, []
        r15 = _nt_SYM_INTERVAL_DELIM
        s14 << r15
        if r15
          r16 = _nt_duration_value
          s14 << r16
          if r16
            r17 = _nt_SYM_ELLIPSIS
            s14 << r17
            if r17
              r18 = _nt_SYM_LT
              s14 << r18
              if r18
                r19 = _nt_duration_value
                s14 << r19
                if r19
                  r20 = _nt_SYM_INTERVAL_DELIM
                  s14 << r20
                end
              end
            end
          end
        end
        if s14.last
          r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
          r14.extend(DurationIntervalValue2)
        else
          @index = i14
          r14 = nil
        end
        if r14
          r0 = r14
        else
          i21, s21 = index, []
          r22 = _nt_SYM_INTERVAL_DELIM
          s21 << r22
          if r22
            r23 = _nt_SYM_GT
            s21 << r23
            if r23
              r24 = _nt_duration_value
              s21 << r24
              if r24
                r25 = _nt_SYM_ELLIPSIS
                s21 << r25
                if r25
                  r26 = _nt_SYM_LT
                  s21 << r26
                  if r26
                    r27 = _nt_duration_value
                    s21 << r27
                    if r27
                      r28 = _nt_SYM_INTERVAL_DELIM
                      s21 << r28
                    end
                  end
                end
              end
            end
          end
          if s21.last
            r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
            r21.extend(DurationIntervalValue3)
          else
            @index = i21
            r21 = nil
          end
          if r21
            r0 = r21
          else
            i29, s29 = index, []
            r30 = _nt_SYM_INTERVAL_DELIM
            s29 << r30
            if r30
              r31 = _nt_SYM_LT
              s29 << r31
              if r31
                r32 = _nt_duration_value
                s29 << r32
                if r32
                  r33 = _nt_SYM_INTERVAL_DELIM
                  s29 << r33
                end
              end
            end
            if s29.last
              r29 = instantiate_node(SyntaxNode,input, i29...index, s29)
              r29.extend(DurationIntervalValue4)
            else
              @index = i29
              r29 = nil
            end
            if r29
              r0 = r29
            else
              i34, s34 = index, []
              r35 = _nt_SYM_INTERVAL_DELIM
              s34 << r35
              if r35
                r36 = _nt_SYM_LE
                s34 << r36
                if r36
                  r37 = _nt_duration_value
                  s34 << r37
                  if r37
                    r38 = _nt_SYM_INTERVAL_DELIM
                    s34 << r38
                  end
                end
              end
              if s34.last
                r34 = instantiate_node(SyntaxNode,input, i34...index, s34)
                r34.extend(DurationIntervalValue5)
              else
                @index = i34
                r34 = nil
              end
              if r34
                r0 = r34
              else
                i39, s39 = index, []
                r40 = _nt_SYM_INTERVAL_DELIM
                s39 << r40
                if r40
                  r41 = _nt_SYM_GT
                  s39 << r41
                  if r41
                    r42 = _nt_duration_value
                    s39 << r42
                    if r42
                      r43 = _nt_SYM_INTERVAL_DELIM
                      s39 << r43
                    end
                  end
                end
                if s39.last
                  r39 = instantiate_node(SyntaxNode,input, i39...index, s39)
                  r39.extend(DurationIntervalValue6)
                else
                  @index = i39
                  r39 = nil
                end
                if r39
                  r0 = r39
                else
                  i44, s44 = index, []
                  r45 = _nt_SYM_INTERVAL_DELIM
                  s44 << r45
                  if r45
                    r46 = _nt_SYM_GE
                    s44 << r46
                    if r46
                      r47 = _nt_duration_value
                      s44 << r47
                      if r47
                        r48 = _nt_SYM_INTERVAL_DELIM
                        s44 << r48
                      end
                    end
                  end
                  if s44.last
                    r44 = instantiate_node(SyntaxNode,input, i44...index, s44)
                    r44.extend(DurationIntervalValue7)
                  else
                    @index = i44
                    r44 = nil
                  end
                  if r44
                    r0 = r44
                  else
                    i49, s49 = index, []
                    r50 = _nt_SYM_INTERVAL_DELIM
                    s49 << r50
                    if r50
                      r51 = _nt_duration_value
                      s49 << r51
                      if r51
                        r52 = _nt_SYM_INTERVAL_DELIM
                        s49 << r52
                      end
                    end
                    if s49.last
                      r49 = instantiate_node(SyntaxNode,input, i49...index, s49)
                      r49.extend(DurationIntervalValue8)
                    else
                      @index = i49
                      r49 = nil
                    end
                    if r49
                      r0 = r49
                    else
                      @index = i0
                      r0 = nil
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:duration_interval_value][start_index] = r0

    r0
  end

  def _nt_ALPHANUM
    start_index = index
    if node_cache[:ALPHANUM].has_key?(index)
      cached = node_cache[:ALPHANUM][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[a-zA-Z0-9]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:ALPHANUM][start_index] = r0

    r0
  end

  def _nt_IDCHAR
    start_index = index
    if node_cache[:IDCHAR].has_key?(index)
      cached = node_cache[:IDCHAR][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[a-zA-Z0-9_]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:IDCHAR][start_index] = r0

    r0
  end

  def _nt_NAMECHAR
    start_index = index
    if node_cache[:NAMECHAR].has_key?(index)
      cached = node_cache[:NAMECHAR][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[a-zA-Z0-9\\._\\-]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:NAMECHAR][start_index] = r0

    r0
  end

  def _nt_NAMECHAR_SPACE
    start_index = index
    if node_cache[:NAMECHAR_SPACE].has_key?(index)
      cached = node_cache[:NAMECHAR_SPACE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[a-zA-Z0-9\\._\\- ]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:NAMECHAR_SPACE][start_index] = r0

    r0
  end

  def _nt_NAMECHAR_PAREN
    start_index = index
    if node_cache[:NAMECHAR_PAREN].has_key?(index)
      cached = node_cache[:NAMECHAR_PAREN][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[a-zA-Z0-9\\._\\-\\(\\)]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:NAMECHAR_PAREN][start_index] = r0

    r0
  end

  module NAMESTR0
  end

  def _nt_NAMESTR
    start_index = index
    if node_cache[:NAMESTR].has_key?(index)
      cached = node_cache[:NAMESTR][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[a-zA-Z]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-zA-Z0-9_]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(NAMESTR0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:NAMESTR][start_index] = r0

    r0
  end

  module Space0
    def white_space
      elements[1]
    end
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_COMMENT
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      r3 = _nt_white_space
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Space0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:space][start_index] = r0

    r0
  end

  module COMMENT0
    def white_space
      elements[0]
    end

  end

  def _nt_COMMENT
    start_index = index
    if node_cache[:COMMENT].has_key?(index)
      cached = node_cache[:COMMENT][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_white_space
    s0 << r1
    if r1
      if has_terminal?('--', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('--')
        r2 = nil
      end
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          if has_terminal?('\G[^\\n]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s0 << r3
        if r3
          if has_terminal?("\n", false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("\n")
            r5 = nil
          end
          s0 << r5
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(COMMENT0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:COMMENT][start_index] = r0

    r0
  end

  def _nt_white_space
    start_index = index
    if node_cache[:white_space].has_key?(index)
      cached = node_cache[:white_space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[ \\t\\r\\n]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:white_space][start_index] = r0

    r0
  end

  def _nt_Minus_code
    start_index = index
    if node_cache[:Minus_code].has_key?(index)
      cached = node_cache[:Minus_code][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('-', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('-')
      r0 = nil
    end

    node_cache[:Minus_code][start_index] = r0

    r0
  end

  def _nt_Plus_Code
    start_index = index
    if node_cache[:Plus_Code].has_key?(index)
      cached = node_cache[:Plus_Code][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('+', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('+')
      r0 = nil
    end

    node_cache[:Plus_Code][start_index] = r0

    r0
  end

  def _nt_Star_code
    start_index = index
    if node_cache[:Star_code].has_key?(index)
      cached = node_cache[:Star_code][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('*', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('*')
      r0 = nil
    end

    node_cache[:Star_code][start_index] = r0

    r0
  end

  def _nt_Slash_code
    start_index = index
    if node_cache[:Slash_code].has_key?(index)
      cached = node_cache[:Slash_code][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('/', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('/')
      r0 = nil
    end

    node_cache[:Slash_code][start_index] = r0

    r0
  end

  def _nt_Carret_code
    start_index = index
    if node_cache[:Carret_code].has_key?(index)
      cached = node_cache[:Carret_code][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('^', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('^')
      r0 = nil
    end

    node_cache[:Carret_code][start_index] = r0

    r0
  end

  def _nt_Dot_code
    start_index = index
    if node_cache[:Dot_code].has_key?(index)
      cached = node_cache[:Dot_code][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('.', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('.')
      r0 = nil
    end

    node_cache[:Dot_code][start_index] = r0

    r0
  end

  def _nt_Semicolon_code
    start_index = index
    if node_cache[:Semicolon_code].has_key?(index)
      cached = node_cache[:Semicolon_code][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?(';', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(';')
      r0 = nil
    end

    node_cache[:Semicolon_code][start_index] = r0

    r0
  end

  def _nt_Colon_code
    start_index = index
    if node_cache[:Colon_code].has_key?(index)
      cached = node_cache[:Colon_code][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?(':', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(':')
      r0 = nil
    end

    node_cache[:Colon_code][start_index] = r0

    r0
  end

  def _nt_Comma_code
    start_index = index
    if node_cache[:Comma_code].has_key?(index)
      cached = node_cache[:Comma_code][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?(',', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(',')
      r0 = nil
    end

    node_cache[:Comma_code][start_index] = r0

    r0
  end

  def _nt_Expclamation_code
    start_index = index
    if node_cache[:Expclamation_code].has_key?(index)
      cached = node_cache[:Expclamation_code][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('!', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('!')
      r0 = nil
    end

    node_cache[:Expclamation_code][start_index] = r0

    r0
  end

  def _nt_Left_parenthesis_code
    start_index = index
    if node_cache[:Left_parenthesis_code].has_key?(index)
      cached = node_cache[:Left_parenthesis_code][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('(', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r0 = nil
    end

    node_cache[:Left_parenthesis_code][start_index] = r0

    r0
  end

  def _nt_Right_parenthesis_code
    start_index = index
    if node_cache[:Right_parenthesis_code].has_key?(index)
      cached = node_cache[:Right_parenthesis_code][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?(')', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(')')
      r0 = nil
    end

    node_cache[:Right_parenthesis_code][start_index] = r0

    r0
  end

  def _nt_Dollar_code
    start_index = index
    if node_cache[:Dollar_code].has_key?(index)
      cached = node_cache[:Dollar_code][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('$', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('$')
      r0 = nil
    end

    node_cache[:Dollar_code][start_index] = r0

    r0
  end

  def _nt_SYM_DT_UNKNOWN
    start_index = index
    if node_cache[:SYM_DT_UNKNOWN].has_key?(index)
      cached = node_cache[:SYM_DT_UNKNOWN][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('??', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('??')
      r0 = nil
    end

    node_cache[:SYM_DT_UNKNOWN][start_index] = r0

    r0
  end

  def _nt_Question_mark_code
    start_index = index
    if node_cache[:Question_mark_code].has_key?(index)
      cached = node_cache[:Question_mark_code][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('?', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('?')
      r0 = nil
    end

    node_cache[:Question_mark_code][start_index] = r0

    r0
  end

  def _nt_SYM_INTERVAL_DELIM
    start_index = index
    if node_cache[:SYM_INTERVAL_DELIM].has_key?(index)
      cached = node_cache[:SYM_INTERVAL_DELIM][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('|', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('|')
      r0 = nil
    end

    node_cache[:SYM_INTERVAL_DELIM][start_index] = r0

    r0
  end

  module LeftBracketCode0
    def space
      elements[1]
    end
  end

  def _nt_Left_bracket_code
    start_index = index
    if node_cache[:Left_bracket_code].has_key?(index)
      cached = node_cache[:Left_bracket_code][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('[', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(LeftBracketCode0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:Left_bracket_code][start_index] = r0

    r0
  end

  def _nt_Right_bracket_codde
    start_index = index
    if node_cache[:Right_bracket_codde].has_key?(index)
      cached = node_cache[:Right_bracket_codde][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?(']', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(']')
      r0 = nil
    end

    node_cache[:Right_bracket_codde][start_index] = r0

    r0
  end

  module SYMEQ0
    def white_space
      elements[1]
    end
  end

  def _nt_SYM_EQ
    start_index = index
    if node_cache[:SYM_EQ].has_key?(index)
      cached = node_cache[:SYM_EQ][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('=', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('=')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_white_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMEQ0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_EQ][start_index] = r0

    r0
  end

  def _nt_SYM_GE
    start_index = index
    if node_cache[:SYM_GE].has_key?(index)
      cached = node_cache[:SYM_GE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('=>', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('=>')
      r0 = nil
    end

    node_cache[:SYM_GE][start_index] = r0

    r0
  end

  def _nt_SYM_LE
    start_index = index
    if node_cache[:SYM_LE].has_key?(index)
      cached = node_cache[:SYM_LE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('<=', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('<=')
      r0 = nil
    end

    node_cache[:SYM_LE][start_index] = r0

    r0
  end

  def _nt_SYM_LT
    start_index = index
    if node_cache[:SYM_LT].has_key?(index)
      cached = node_cache[:SYM_LT][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('<', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('<')
      r0 = nil
    end

    node_cache[:SYM_LT][start_index] = r0

    r0
  end

  def _nt_SYM_GT
    start_index = index
    if node_cache[:SYM_GT].has_key?(index)
      cached = node_cache[:SYM_GT][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('>', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('>')
      r0 = nil
    end

    node_cache[:SYM_GT][start_index] = r0

    r0
  end

  module SYMSTARTDBLOCK0
    def space
      elements[1]
    end
  end

  def _nt_SYM_START_DBLOCK
    start_index = index
    if node_cache[:SYM_START_DBLOCK].has_key?(index)
      cached = node_cache[:SYM_START_DBLOCK][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('<', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('<')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMSTARTDBLOCK0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_START_DBLOCK][start_index] = r0

    r0
  end

  module SYMENDDBLOCK0
    def space
      elements[1]
    end
  end

  def _nt_SYM_END_DBLOCK
    start_index = index
    if node_cache[:SYM_END_DBLOCK].has_key?(index)
      cached = node_cache[:SYM_END_DBLOCK][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('>', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('>')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMENDDBLOCK0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_END_DBLOCK][start_index] = r0

    r0
  end

  module SYMSTARTCBLOCK0
    def space
      elements[1]
    end
  end

  def _nt_SYM_START_CBLOCK
    start_index = index
    if node_cache[:SYM_START_CBLOCK].has_key?(index)
      cached = node_cache[:SYM_START_CBLOCK][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('{', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('{')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMSTARTCBLOCK0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_START_CBLOCK][start_index] = r0

    r0
  end

  module SYMENDCBLOCK0
    def space
      elements[1]
    end
  end

  def _nt_SYM_END_CBLOCK
    start_index = index
    if node_cache[:SYM_END_CBLOCK].has_key?(index)
      cached = node_cache[:SYM_END_CBLOCK][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('}', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('}')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMENDCBLOCK0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_END_CBLOCK][start_index] = r0

    r0
  end

  def _nt_SYM_ELLIPSIS
    start_index = index
    if node_cache[:SYM_ELLIPSIS].has_key?(index)
      cached = node_cache[:SYM_ELLIPSIS][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('..', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('..')
      r0 = nil
    end

    node_cache[:SYM_ELLIPSIS][start_index] = r0

    r0
  end

  def _nt_SYM_LIST_CONTINUE
    start_index = index
    if node_cache[:SYM_LIST_CONTINUE].has_key?(index)
      cached = node_cache[:SYM_LIST_CONTINUE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('...', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('...')
      r0 = nil
    end

    node_cache[:SYM_LIST_CONTINUE][start_index] = r0

    r0
  end

  module SYMINFINITY0
    def space
      elements[8]
    end
  end

  def _nt_SYM_INFINITY
    start_index = index
    if node_cache[:SYM_INFINITY].has_key?(index)
      cached = node_cache[:SYM_INFINITY][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[Ii]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[Nn]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s0 << r2
      if r2
        if has_terminal?('\G[Ff]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        s0 << r3
        if r3
          if has_terminal?('\G[Ii]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          s0 << r4
          if r4
            if has_terminal?('\G[Nn]', true, index)
              r5 = true
              @index += 1
            else
              r5 = nil
            end
            s0 << r5
            if r5
              if has_terminal?('\G[Ii]', true, index)
                r6 = true
                @index += 1
              else
                r6 = nil
              end
              s0 << r6
              if r6
                if has_terminal?('\G[Tt]', true, index)
                  r7 = true
                  @index += 1
                else
                  r7 = nil
                end
                s0 << r7
                if r7
                  if has_terminal?('\G[Yy]', true, index)
                    r8 = true
                    @index += 1
                  else
                    r8 = nil
                  end
                  s0 << r8
                  if r8
                    r9 = _nt_space
                    s0 << r9
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMINFINITY0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_INFINITY][start_index] = r0

    r0
  end

  module SYMARCHETYPE0
    def space
      elements[9]
    end
  end

  def _nt_SYM_ARCHETYPE
    start_index = index
    if node_cache[:SYM_ARCHETYPE].has_key?(index)
      cached = node_cache[:SYM_ARCHETYPE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[Aa]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[Rr]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s0 << r2
      if r2
        if has_terminal?('\G[Cc]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        s0 << r3
        if r3
          if has_terminal?('\G[Hh]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          s0 << r4
          if r4
            if has_terminal?('\G[Ee]', true, index)
              r5 = true
              @index += 1
            else
              r5 = nil
            end
            s0 << r5
            if r5
              if has_terminal?('\G[Tt]', true, index)
                r6 = true
                @index += 1
              else
                r6 = nil
              end
              s0 << r6
              if r6
                if has_terminal?('\G[Yy]', true, index)
                  r7 = true
                  @index += 1
                else
                  r7 = nil
                end
                s0 << r7
                if r7
                  if has_terminal?('\G[Pp]', true, index)
                    r8 = true
                    @index += 1
                  else
                    r8 = nil
                  end
                  s0 << r8
                  if r8
                    if has_terminal?('\G[Ee]', true, index)
                      r9 = true
                      @index += 1
                    else
                      r9 = nil
                    end
                    s0 << r9
                    if r9
                      r10 = _nt_space
                      s0 << r10
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMARCHETYPE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_ARCHETYPE][start_index] = r0

    r0
  end

  module SYMMATCHES0
  end

  module SYMMATCHES1
    def white_space
      elements[1]
    end
  end

  def _nt_SYM_MATCHES
    start_index = index
    if node_cache[:SYM_MATCHES].has_key?(index)
      cached = node_cache[:SYM_MATCHES][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('matches', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('matches')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      i3, s3 = index, []
      if has_terminal?('is', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('is')
        r4 = nil
      end
      s3 << r4
      if r4
        if has_terminal?('_', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('_')
          r5 = nil
        end
        s3 << r5
        if r5
          if has_terminal?('in', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('in')
            r6 = nil
          end
          s3 << r6
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(SYMMATCHES0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r7 = _nt_white_space
      s0 << r7
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMMATCHES1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_MATCHES][start_index] = r0

    r0
  end

  module SYMTHEN0
    def space
      elements[1]
    end
  end

  def _nt_SYM_THEN
    start_index = index
    if node_cache[:SYM_THEN].has_key?(index)
      cached = node_cache[:SYM_THEN][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('then', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('then')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMTHEN0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_THEN][start_index] = r0

    r0
  end

  module SYMELSE0
    def space
      elements[1]
    end
  end

  def _nt_SYM_ELSE
    start_index = index
    if node_cache[:SYM_ELSE].has_key?(index)
      cached = node_cache[:SYM_ELSE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('else', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('else')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMELSE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_ELSE][start_index] = r0

    r0
  end

  module SYMAND0
    def space
      elements[1]
    end
  end

  def _nt_SYM_AND
    start_index = index
    if node_cache[:SYM_AND].has_key?(index)
      cached = node_cache[:SYM_AND][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('and', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('and')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMAND0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_AND][start_index] = r0

    r0
  end

  module SYMOR0
    def space
      elements[1]
    end
  end

  def _nt_SYM_OR
    start_index = index
    if node_cache[:SYM_OR].has_key?(index)
      cached = node_cache[:SYM_OR][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('or', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('or')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMOR0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_OR][start_index] = r0

    r0
  end

  module SYMXOR0
    def space
      elements[1]
    end
  end

  def _nt_SYM_XOR
    start_index = index
    if node_cache[:SYM_XOR].has_key?(index)
      cached = node_cache[:SYM_XOR][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('xor', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('xor')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMXOR0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_XOR][start_index] = r0

    r0
  end

  module SYMNOT0
    def space
      elements[1]
    end
  end

  def _nt_SYM_NOT
    start_index = index
    if node_cache[:SYM_NOT].has_key?(index)
      cached = node_cache[:SYM_NOT][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('not', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('not')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMNOT0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_NOT][start_index] = r0

    r0
  end

  module SYMIMPLIES0
    def space
      elements[1]
    end
  end

  def _nt_SYM_IMPLIES
    start_index = index
    if node_cache[:SYM_IMPLIES].has_key?(index)
      cached = node_cache[:SYM_IMPLIES][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('implies', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('implies')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMIMPLIES0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_IMPLIES][start_index] = r0

    r0
  end

  module SYMTRUE0
    def space
      elements[1]
    end
  end

  def _nt_SYM_TRUE
    start_index = index
    if node_cache[:SYM_TRUE].has_key?(index)
      cached = node_cache[:SYM_TRUE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('true', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('true')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMTRUE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_TRUE][start_index] = r0

    r0
  end

  module SYMFALSE0
    def space
      elements[1]
    end
  end

  def _nt_SYM_FALSE
    start_index = index
    if node_cache[:SYM_FALSE].has_key?(index)
      cached = node_cache[:SYM_FALSE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('false', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('false')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMFALSE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_FALSE][start_index] = r0

    r0
  end

  module SYMFORALL0
    def space
      elements[3]
    end
  end

  def _nt_SYM_FORALL
    start_index = index
    if node_cache[:SYM_FORALL].has_key?(index)
      cached = node_cache[:SYM_FORALL][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('for', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('for')
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('_', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('_')
        r2 = nil
      end
      s0 << r2
      if r2
        if has_terminal?('all', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure('all')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_space
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMFORALL0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_FORALL][start_index] = r0

    r0
  end

  module SYMEXISTS0
    def space
      elements[1]
    end
  end

  def _nt_SYM_EXISTS
    start_index = index
    if node_cache[:SYM_EXISTS].has_key?(index)
      cached = node_cache[:SYM_EXISTS][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('exists', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('exists')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMEXISTS0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_EXISTS][start_index] = r0

    r0
  end

  module SYMEXISTENCE0
    def space
      elements[1]
    end
  end

  def _nt_SYM_EXISTENCE
    start_index = index
    if node_cache[:SYM_EXISTENCE].has_key?(index)
      cached = node_cache[:SYM_EXISTENCE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('existence', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 9))
      @index += 9
    else
      terminal_parse_failure('existence')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMEXISTENCE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_EXISTENCE][start_index] = r0

    r0
  end

  module SYMOCCURRENCES0
    def white_space
      elements[1]
    end
  end

  def _nt_SYM_OCCURRENCES
    start_index = index
    if node_cache[:SYM_OCCURRENCES].has_key?(index)
      cached = node_cache[:SYM_OCCURRENCES][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('occurrences', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 11))
      @index += 11
    else
      terminal_parse_failure('occurrences')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_white_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMOCCURRENCES0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_OCCURRENCES][start_index] = r0

    r0
  end

  module SYMCARDINALITY0
    def white_space
      elements[1]
    end
  end

  def _nt_SYM_CARDINALITY
    start_index = index
    if node_cache[:SYM_CARDINALITY].has_key?(index)
      cached = node_cache[:SYM_CARDINALITY][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('cardinality', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 11))
      @index += 11
    else
      terminal_parse_failure('cardinality')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_white_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMCARDINALITY0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_CARDINALITY][start_index] = r0

    r0
  end

  module SYMORDERED0
    def white_space
      elements[1]
    end
  end

  def _nt_SYM_ORDERED
    start_index = index
    if node_cache[:SYM_ORDERED].has_key?(index)
      cached = node_cache[:SYM_ORDERED][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('ordered', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('ordered')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_white_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMORDERED0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_ORDERED][start_index] = r0

    r0
  end

  module SYMUNORDERD0
    def white_space
      elements[1]
    end
  end

  def _nt_SYM_UNORDERD
    start_index = index
    if node_cache[:SYM_UNORDERD].has_key?(index)
      cached = node_cache[:SYM_UNORDERD][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('unordered', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 9))
      @index += 9
    else
      terminal_parse_failure('unordered')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_white_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMUNORDERD0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_UNORDERD][start_index] = r0

    r0
  end

  module SYMUNIQUE0
    def white_space
      elements[1]
    end
  end

  def _nt_SYM_UNIQUE
    start_index = index
    if node_cache[:SYM_UNIQUE].has_key?(index)
      cached = node_cache[:SYM_UNIQUE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('unique', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('unique')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_white_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMUNIQUE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_UNIQUE][start_index] = r0

    r0
  end

  module SYMINFINITY0
    def space
      elements[1]
    end
  end

  def _nt_SYM_INFINITY
    start_index = index
    if node_cache[:SYM_INFINITY].has_key?(index)
      cached = node_cache[:SYM_INFINITY][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('infinity', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 8))
      @index += 8
    else
      terminal_parse_failure('infinity')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMINFINITY0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_INFINITY][start_index] = r0

    r0
  end

  module SYMUSENODE0
    def space
      elements[3]
    end
  end

  def _nt_SYM_USE_NODE
    start_index = index
    if node_cache[:SYM_USE_NODE].has_key?(index)
      cached = node_cache[:SYM_USE_NODE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('use', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('use')
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('_', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('_')
        r2 = nil
      end
      s0 << r2
      if r2
        if has_terminal?('node', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 4))
          @index += 4
        else
          terminal_parse_failure('node')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_space
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMUSENODE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_USE_NODE][start_index] = r0

    r0
  end

  module SYMALLOWARCHETYPE0
    def space
      elements[3]
    end
  end

  def _nt_SYM_ALLOW_ARCHETYPE
    start_index = index
    if node_cache[:SYM_ALLOW_ARCHETYPE].has_key?(index)
      cached = node_cache[:SYM_ALLOW_ARCHETYPE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('allow', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('allow')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('use', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure('use')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      if has_terminal?('_', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('_')
        r4 = nil
      end
      s0 << r4
      if r4
        if has_terminal?('archetype', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 9))
          @index += 9
        else
          terminal_parse_failure('archetype')
          r5 = nil
        end
        s0 << r5
        if r5
          r6 = _nt_space
          s0 << r6
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMALLOWARCHETYPE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_ALLOW_ARCHETYPE][start_index] = r0

    r0
  end

  module SYMINCLUDE0
    def space
      elements[1]
    end
  end

  def _nt_SYM_INCLUDE
    start_index = index
    if node_cache[:SYM_INCLUDE].has_key?(index)
      cached = node_cache[:SYM_INCLUDE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('include', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('include')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMINCLUDE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_INCLUDE][start_index] = r0

    r0
  end

  module SYMEXCLUDE0
    def space
      elements[1]
    end
  end

  def _nt_SYM_EXCLUDE
    start_index = index
    if node_cache[:SYM_EXCLUDE].has_key?(index)
      cached = node_cache[:SYM_EXCLUDE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('exclude', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('exclude')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMEXCLUDE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_EXCLUDE][start_index] = r0

    r0
  end

  module SYMTEMPLATECOMPONENT0
    def space
      elements[1]
    end
  end

  def _nt_SYM_TEMPLATE_COMPONENT
    start_index = index
    if node_cache[:SYM_TEMPLATE_COMPONENT].has_key?(index)
      cached = node_cache[:SYM_TEMPLATE_COMPONENT][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('template_component', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 18))
      @index += 18
    else
      terminal_parse_failure('template_component')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMTEMPLATECOMPONENT0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_TEMPLATE_COMPONENT][start_index] = r0

    r0
  end

  module SYMTEMPLATE0
    def space
      elements[1]
    end
  end

  def _nt_SYM_TEMPLATE
    start_index = index
    if node_cache[:SYM_TEMPLATE].has_key?(index)
      cached = node_cache[:SYM_TEMPLATE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('template', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 8))
      @index += 8
    else
      terminal_parse_failure('template')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMTEMPLATE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_TEMPLATE][start_index] = r0

    r0
  end

  module SYMOPERATIONALTEMPLATE0
    def space
      elements[1]
    end
  end

  def _nt_SYM_OPERATIONAL_TEMPLATE
    start_index = index
    if node_cache[:SYM_OPERATIONAL_TEMPLATE].has_key?(index)
      cached = node_cache[:SYM_OPERATIONAL_TEMPLATE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('operational_template', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 20))
      @index += 20
    else
      terminal_parse_failure('operational_template')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMOPERATIONALTEMPLATE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_OPERATIONAL_TEMPLATE][start_index] = r0

    r0
  end

  module SYMADLVERSION0
    def space
      elements[1]
    end
  end

  def _nt_SYM_ADL_VERSION
    start_index = index
    if node_cache[:SYM_ADL_VERSION].has_key?(index)
      cached = node_cache[:SYM_ADL_VERSION][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('adl_version', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 11))
      @index += 11
    else
      terminal_parse_failure('adl_version')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMADLVERSION0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_ADL_VERSION][start_index] = r0

    r0
  end

  module SYMISCONTROLLED0
    def space
      elements[1]
    end
  end

  def _nt_SYM_IS_CONTROLLED
    start_index = index
    if node_cache[:SYM_IS_CONTROLLED].has_key?(index)
      cached = node_cache[:SYM_IS_CONTROLLED][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('controlled', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 10))
      @index += 10
    else
      terminal_parse_failure('controlled')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMISCONTROLLED0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_IS_CONTROLLED][start_index] = r0

    r0
  end

  module SYMISGENERATED0
    def space
      elements[1]
    end
  end

  def _nt_SYM_IS_GENERATED
    start_index = index
    if node_cache[:SYM_IS_GENERATED].has_key?(index)
      cached = node_cache[:SYM_IS_GENERATED][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('generated', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 9))
      @index += 9
    else
      terminal_parse_failure('generated')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMISGENERATED0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_IS_GENERATED][start_index] = r0

    r0
  end

  module SYMSPECIALIZE0
    def space
      elements[10]
    end
  end

  def _nt_SYM_SPECIALIZE
    start_index = index
    if node_cache[:SYM_SPECIALIZE].has_key?(index)
      cached = node_cache[:SYM_SPECIALIZE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[Ss]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[Pp]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s0 << r2
      if r2
        if has_terminal?('\G[Ee]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        s0 << r3
        if r3
          if has_terminal?('\G[Cc]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          s0 << r4
          if r4
            if has_terminal?('\G[Ii]', true, index)
              r5 = true
              @index += 1
            else
              r5 = nil
            end
            s0 << r5
            if r5
              if has_terminal?('\G[Aa]', true, index)
                r6 = true
                @index += 1
              else
                r6 = nil
              end
              s0 << r6
              if r6
                if has_terminal?('\G[Ll]', true, index)
                  r7 = true
                  @index += 1
                else
                  r7 = nil
                end
                s0 << r7
                if r7
                  if has_terminal?('\G[Ii]', true, index)
                    r8 = true
                    @index += 1
                  else
                    r8 = nil
                  end
                  s0 << r8
                  if r8
                    if has_terminal?('\G[SsZz]', true, index)
                      r9 = true
                      @index += 1
                    else
                      r9 = nil
                    end
                    s0 << r9
                    if r9
                      if has_terminal?('\G[Ee]', true, index)
                        r10 = true
                        @index += 1
                      else
                        r10 = nil
                      end
                      s0 << r10
                      if r10
                        r11 = _nt_space
                        s0 << r11
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMSPECIALIZE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_SPECIALIZE][start_index] = r0

    r0
  end

  module SYMCONCEPT0
    def space
      elements[7]
    end
  end

  def _nt_SYM_CONCEPT
    start_index = index
    if node_cache[:SYM_CONCEPT].has_key?(index)
      cached = node_cache[:SYM_CONCEPT][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[Cc]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[Oo]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s0 << r2
      if r2
        if has_terminal?('\G[Nn]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        s0 << r3
        if r3
          if has_terminal?('\G[Cc]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          s0 << r4
          if r4
            if has_terminal?('\G[Ee]', true, index)
              r5 = true
              @index += 1
            else
              r5 = nil
            end
            s0 << r5
            if r5
              if has_terminal?('\G[Pp]', true, index)
                r6 = true
                @index += 1
              else
                r6 = nil
              end
              s0 << r6
              if r6
                if has_terminal?('\G[Tt]', true, index)
                  r7 = true
                  @index += 1
                else
                  r7 = nil
                end
                s0 << r7
                if r7
                  r8 = _nt_space
                  s0 << r8
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMCONCEPT0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_CONCEPT][start_index] = r0

    r0
  end

  module SYMLANGUAGE0
    def space
      elements[1]
    end
  end

  def _nt_SYM_LANGUAGE
    start_index = index
    if node_cache[:SYM_LANGUAGE].has_key?(index)
      cached = node_cache[:SYM_LANGUAGE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('language', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 8))
      @index += 8
    else
      terminal_parse_failure('language')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMLANGUAGE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_LANGUAGE][start_index] = r0

    r0
  end

  module SYMDESCRIPTION0
    def space
      elements[1]
    end
  end

  def _nt_SYM_DESCRIPTION
    start_index = index
    if node_cache[:SYM_DESCRIPTION].has_key?(index)
      cached = node_cache[:SYM_DESCRIPTION][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('description', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 11))
      @index += 11
    else
      terminal_parse_failure('description')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMDESCRIPTION0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_DESCRIPTION][start_index] = r0

    r0
  end

  module SYMDEFINITION0
    def space
      elements[1]
    end
  end

  def _nt_SYM_DEFINITION
    start_index = index
    if node_cache[:SYM_DEFINITION].has_key?(index)
      cached = node_cache[:SYM_DEFINITION][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('definition', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 10))
      @index += 10
    else
      terminal_parse_failure('definition')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMDEFINITION0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_DEFINITION][start_index] = r0

    r0
  end

  module SYMINVARIANT0
    def space
      elements[1]
    end
  end

  def _nt_SYM_INVARIANT
    start_index = index
    if node_cache[:SYM_INVARIANT].has_key?(index)
      cached = node_cache[:SYM_INVARIANT][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('invariant', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 9))
      @index += 9
    else
      terminal_parse_failure('invariant')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMINVARIANT0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_INVARIANT][start_index] = r0

    r0
  end

  module SYMONTOLOGY0
    def space
      elements[1]
    end
  end

  def _nt_SYM_ONTOLOGY
    start_index = index
    if node_cache[:SYM_ONTOLOGY].has_key?(index)
      cached = node_cache[:SYM_ONTOLOGY][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('ontology', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 8))
      @index += 8
    else
      terminal_parse_failure('ontology')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMONTOLOGY0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_ONTOLOGY][start_index] = r0

    r0
  end

  module SYMANNOTATIONS0
    def space
      elements[1]
    end
  end

  def _nt_SYM_ANNOTATIONS
    start_index = index
    if node_cache[:SYM_ANNOTATIONS].has_key?(index)
      cached = node_cache[:SYM_ANNOTATIONS][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('annotations', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 11))
      @index += 11
    else
      terminal_parse_failure('annotations')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SYMANNOTATIONS0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:SYM_ANNOTATIONS][start_index] = r0

    r0
  end

  module VVERSIONSTRING0
  end

  module VVERSIONSTRING1
  end

  def _nt_V_VERSION_STRING
    start_index = index
    if node_cache[:V_VERSION_STRING].has_key?(index)
      cached = node_cache[:V_VERSION_STRING][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      if has_terminal?('\G[0-9]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      if has_terminal?('.', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('.')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s0 << r4
        if r4
          s6, i6 = [], index
          loop do
            i7, s7 = index, []
            if has_terminal?('.', false, index)
              r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('.')
              r8 = nil
            end
            s7 << r8
            if r8
              s9, i9 = [], index
              loop do
                if has_terminal?('\G[0-9]', true, index)
                  r10 = true
                  @index += 1
                else
                  r10 = nil
                end
                if r10
                  s9 << r10
                else
                  break
                end
              end
              if s9.empty?
                @index = i9
                r9 = nil
              else
                r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
              end
              s7 << r9
            end
            if s7.last
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              r7.extend(VVERSIONSTRING0)
            else
              @index = i7
              r7 = nil
            end
            if r7
              s6 << r7
            else
              break
            end
          end
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          s0 << r6
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(VVERSIONSTRING1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:V_VERSION_STRING][start_index] = r0

    r0
  end

  module VARCHETYPEID0
    def NAMESTR
      elements[1]
    end
  end

  module VARCHETYPEID1
    def NAMESTR
      elements[1]
    end
  end

  module VARCHETYPEID2
    def NAMESTR1
      elements[0]
    end

    def NAMESTR2
      elements[3]
    end

  end

  def _nt_V_ARCHETYPE_ID
    start_index = index
    if node_cache[:V_ARCHETYPE_ID].has_key?(index)
      cached = node_cache[:V_ARCHETYPE_ID][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_NAMESTR
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        if has_terminal?('-', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('-')
          r4 = nil
        end
        s3 << r4
        if r4
          r5 = _nt_NAMESTR
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(VARCHETYPEID0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
        if s2.size == 2
          break
        end
      end
      if s2.size < 2
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        if has_terminal?('.', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('.')
          r6 = nil
        end
        s0 << r6
        if r6
          r7 = _nt_NAMESTR
          s0 << r7
          if r7
            s8, i8 = [], index
            loop do
              i9, s9 = index, []
              if has_terminal?('-', false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('-')
                r10 = nil
              end
              s9 << r10
              if r10
                r11 = _nt_NAMESTR
                s9 << r11
              end
              if s9.last
                r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                r9.extend(VARCHETYPEID1)
              else
                @index = i9
                r9 = nil
              end
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s0 << r8
            if r8
              if has_terminal?('.v', false, index)
                r12 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure('.v')
                r12 = nil
              end
              s0 << r12
              if r12
                if has_terminal?('\G[1-9]', true, index)
                  r13 = true
                  @index += 1
                else
                  r13 = nil
                end
                s0 << r13
                if r13
                  s14, i14 = [], index
                  loop do
                    if has_terminal?('\G[0-9]', true, index)
                      r15 = true
                      @index += 1
                    else
                      r15 = nil
                    end
                    if r15
                      s14 << r15
                    else
                      break
                    end
                  end
                  r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
                  s0 << r14
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(VARCHETYPEID2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:V_ARCHETYPE_ID][start_index] = r0

    r0
  end

  module VIDENTIFIER0
  end

  def _nt_V_IDENTIFIER
    start_index = index
    if node_cache[:V_IDENTIFIER].has_key?(index)
      cached = node_cache[:V_IDENTIFIER][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[a-zA-Z]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-zA-Z0-9_]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(VIDENTIFIER0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:V_IDENTIFIER][start_index] = r0

    r0
  end

  module VURI0
  end

  def _nt_V_URI
    start_index = index
    if node_cache[:V_URI].has_key?(index)
      cached = node_cache[:V_URI][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      if has_terminal?('\G[a-z]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      if has_terminal?('://', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure('://')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          if has_terminal?('\G[^<>|\\\\{}^~"\\[\\] ]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(VURI0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:V_URI][start_index] = r0

    r0
  end

  module VQUALIFIEDTERMCODEREF0
  end

  def _nt_V_QUALIFIED_TERM_CODE_REF
    start_index = index
    if node_cache[:V_QUALIFIED_TERM_CODE_REF].has_key?(index)
      cached = node_cache[:V_QUALIFIED_TERM_CODE_REF][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('[', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_NAMECHAR_PAREN
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        if has_terminal?('::', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('::')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_NAMECHAR
            if r6
              s5 << r6
            else
              break
            end
          end
          if s5.empty?
            @index = i5
            r5 = nil
          else
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          end
          s0 << r5
          if r5
            if has_terminal?(']', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(']')
              r7 = nil
            end
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(VQUALIFIEDTERMCODEREF0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:V_QUALIFIED_TERM_CODE_REF][start_index] = r0

    r0
  end

  module ERRVQUALIFIEDTERMCODEREF0
  end

  def _nt_ERR_V_QUALIFIED_TERM_CODE_REF
    start_index = index
    if node_cache[:ERR_V_QUALIFIED_TERM_CODE_REF].has_key?(index)
      cached = node_cache[:ERR_V_QUALIFIED_TERM_CODE_REF][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('[', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_NAMECHAR_PAREN
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        if has_terminal?('::', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('::')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_NAMECHAR_SPACE
            if r6
              s5 << r6
            else
              break
            end
          end
          if s5.empty?
            @index = i5
            r5 = nil
          else
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          end
          s0 << r5
          if r5
            if has_terminal?(']', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(']')
              r7 = nil
            end
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ERRVQUALIFIEDTERMCODEREF0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:ERR_V_QUALIFIED_TERM_CODE_REF][start_index] = r0

    r0
  end

  module VLOCALTERMCODEREF0
    def ALPHANUM
      elements[1]
    end

  end

  def _nt_V_LOCAL_TERM_CODE_REF
    start_index = index
    if node_cache[:V_LOCAL_TERM_CODE_REF].has_key?(index)
      cached = node_cache[:V_LOCAL_TERM_CODE_REF][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('[', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_ALPHANUM
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          r4 = _nt_NAMECHAR
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s0 << r3
        if r3
          if has_terminal?(']', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(']')
            r5 = nil
          end
          s0 << r5
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(VLOCALTERMCODEREF0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:V_LOCAL_TERM_CODE_REF][start_index] = r0

    r0
  end

  module VLOCALCODE0
    def a
      elements[0]
    end

  end

  def _nt_V_LOCAL_CODE
    start_index = index
    if node_cache[:V_LOCAL_CODE].has_key?(index)
      cached = node_cache[:V_LOCAL_CODE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_a
    s0 << r1
    if r1
      if has_terminal?('\G[ct]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          if has_terminal?('\G[0-9\\.]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        if s3.empty?
          @index = i3
          r3 = nil
        else
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(VLOCALCODE0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:V_LOCAL_CODE][start_index] = r0

    r0
  end

  module VISO8601EXTENDEDDATETIME0
  end

  module VISO8601EXTENDEDDATETIME1
  end

  module VISO8601EXTENDEDDATETIME2
  end

  module VISO8601EXTENDEDDATETIME3
  end

  module VISO8601EXTENDEDDATETIME4
  end

  module VISO8601EXTENDEDDATETIME5
  end

  module VISO8601EXTENDEDDATETIME6
  end

  def _nt_V_ISO8601_EXTENDED_DATE_TIME
    start_index = index
    if node_cache[:V_ISO8601_EXTENDED_DATE_TIME].has_key?(index)
      cached = node_cache[:V_ISO8601_EXTENDED_DATE_TIME][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    s2, i2 = [], index
    loop do
      if has_terminal?('\G[0-9]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        s2 << r3
      else
        break
      end
      if s2.size == 4
        break
      end
    end
    if s2.size < 4
      @index = i2
      r2 = nil
    else
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
    end
    s1 << r2
    if r2
      if has_terminal?('-', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('-')
        r4 = nil
      end
      s1 << r4
      if r4
        if has_terminal?('\G[0-1]', true, index)
          r5 = true
          @index += 1
        else
          r5 = nil
        end
        s1 << r5
        if r5
          if has_terminal?('\G[0-9]', true, index)
            r6 = true
            @index += 1
          else
            r6 = nil
          end
          s1 << r6
          if r6
            if has_terminal?('-', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('-')
              r7 = nil
            end
            s1 << r7
            if r7
              if has_terminal?('\G[0-3]', true, index)
                r8 = true
                @index += 1
              else
                r8 = nil
              end
              s1 << r8
              if r8
                if has_terminal?('\G[0-9]', true, index)
                  r9 = true
                  @index += 1
                else
                  r9 = nil
                end
                s1 << r9
                if r9
                  if has_terminal?('T', false, index)
                    r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('T')
                    r10 = nil
                  end
                  s1 << r10
                  if r10
                    if has_terminal?('\G[0-2]', true, index)
                      r11 = true
                      @index += 1
                    else
                      r11 = nil
                    end
                    s1 << r11
                    if r11
                      if has_terminal?('\G[0-9]', true, index)
                        r12 = true
                        @index += 1
                      else
                        r12 = nil
                      end
                      s1 << r12
                      if r12
                        if has_terminal?(':', false, index)
                          r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure(':')
                          r13 = nil
                        end
                        s1 << r13
                        if r13
                          if has_terminal?('\G[0-6]', true, index)
                            r14 = true
                            @index += 1
                          else
                            r14 = nil
                          end
                          s1 << r14
                          if r14
                            if has_terminal?('\G[0-9]', true, index)
                              r15 = true
                              @index += 1
                            else
                              r15 = nil
                            end
                            s1 << r15
                            if r15
                              if has_terminal?(':', false, index)
                                r16 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                @index += 1
                              else
                                terminal_parse_failure(':')
                                r16 = nil
                              end
                              s1 << r16
                              if r16
                                if has_terminal?('\G[0-6]', true, index)
                                  r17 = true
                                  @index += 1
                                else
                                  r17 = nil
                                end
                                s1 << r17
                                if r17
                                  if has_terminal?('\G[0-9]', true, index)
                                    r18 = true
                                    @index += 1
                                  else
                                    r18 = nil
                                  end
                                  s1 << r18
                                  if r18
                                    i20, s20 = index, []
                                    if has_terminal?(',', false, index)
                                      r21 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                      @index += 1
                                    else
                                      terminal_parse_failure(',')
                                      r21 = nil
                                    end
                                    s20 << r21
                                    if r21
                                      s22, i22 = [], index
                                      loop do
                                        if has_terminal?('\G[0-9]', true, index)
                                          r23 = true
                                          @index += 1
                                        else
                                          r23 = nil
                                        end
                                        if r23
                                          s22 << r23
                                        else
                                          break
                                        end
                                      end
                                      if s22.empty?
                                        @index = i22
                                        r22 = nil
                                      else
                                        r22 = instantiate_node(SyntaxNode,input, i22...index, s22)
                                      end
                                      s20 << r22
                                    end
                                    if s20.last
                                      r20 = instantiate_node(SyntaxNode,input, i20...index, s20)
                                      r20.extend(VISO8601EXTENDEDDATETIME0)
                                    else
                                      @index = i20
                                      r20 = nil
                                    end
                                    if r20
                                      r19 = r20
                                    else
                                      r19 = instantiate_node(SyntaxNode,input, index...index)
                                    end
                                    s1 << r19
                                    if r19
                                      i25 = index
                                      if has_terminal?('Z', false, index)
                                        r26 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                        @index += 1
                                      else
                                        terminal_parse_failure('Z')
                                        r26 = nil
                                      end
                                      if r26
                                        r25 = r26
                                      else
                                        i27, s27 = index, []
                                        if has_terminal?('\G[+-]', true, index)
                                          r28 = true
                                          @index += 1
                                        else
                                          r28 = nil
                                        end
                                        s27 << r28
                                        if r28
                                          s29, i29 = [], index
                                          loop do
                                            if has_terminal?('\G[0-9]', true, index)
                                              r30 = true
                                              @index += 1
                                            else
                                              r30 = nil
                                            end
                                            if r30
                                              s29 << r30
                                            else
                                              break
                                            end
                                            if s29.size == 4
                                              break
                                            end
                                          end
                                          if s29.size < 4
                                            @index = i29
                                            r29 = nil
                                          else
                                            r29 = instantiate_node(SyntaxNode,input, i29...index, s29)
                                          end
                                          s27 << r29
                                        end
                                        if s27.last
                                          r27 = instantiate_node(SyntaxNode,input, i27...index, s27)
                                          r27.extend(VISO8601EXTENDEDDATETIME1)
                                        else
                                          @index = i27
                                          r27 = nil
                                        end
                                        if r27
                                          r25 = r27
                                        else
                                          @index = i25
                                          r25 = nil
                                        end
                                      end
                                      if r25
                                        r24 = r25
                                      else
                                        r24 = instantiate_node(SyntaxNode,input, index...index)
                                      end
                                      s1 << r24
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(VISO8601EXTENDEDDATETIME2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i31, s31 = index, []
      s32, i32 = [], index
      loop do
        if has_terminal?('\G[0-9]', true, index)
          r33 = true
          @index += 1
        else
          r33 = nil
        end
        if r33
          s32 << r33
        else
          break
        end
        if s32.size == 4
          break
        end
      end
      if s32.size < 4
        @index = i32
        r32 = nil
      else
        r32 = instantiate_node(SyntaxNode,input, i32...index, s32)
      end
      s31 << r32
      if r32
        if has_terminal?('-', false, index)
          r34 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('-')
          r34 = nil
        end
        s31 << r34
        if r34
          if has_terminal?('\G[0-1]', true, index)
            r35 = true
            @index += 1
          else
            r35 = nil
          end
          s31 << r35
          if r35
            if has_terminal?('\G[0-9]', true, index)
              r36 = true
              @index += 1
            else
              r36 = nil
            end
            s31 << r36
            if r36
              if has_terminal?('-', false, index)
                r37 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('-')
                r37 = nil
              end
              s31 << r37
              if r37
                if has_terminal?('\G[0-3]', true, index)
                  r38 = true
                  @index += 1
                else
                  r38 = nil
                end
                s31 << r38
                if r38
                  if has_terminal?('\G[0-9]', true, index)
                    r39 = true
                    @index += 1
                  else
                    r39 = nil
                  end
                  s31 << r39
                  if r39
                    if has_terminal?('T', false, index)
                      r40 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure('T')
                      r40 = nil
                    end
                    s31 << r40
                    if r40
                      if has_terminal?('\G[0-2]', true, index)
                        r41 = true
                        @index += 1
                      else
                        r41 = nil
                      end
                      s31 << r41
                      if r41
                        if has_terminal?('\G[0-9]', true, index)
                          r42 = true
                          @index += 1
                        else
                          r42 = nil
                        end
                        s31 << r42
                        if r42
                          if has_terminal?(':', false, index)
                            r43 = instantiate_node(SyntaxNode,input, index...(index + 1))
                            @index += 1
                          else
                            terminal_parse_failure(':')
                            r43 = nil
                          end
                          s31 << r43
                          if r43
                            if has_terminal?('\G[0-6]', true, index)
                              r44 = true
                              @index += 1
                            else
                              r44 = nil
                            end
                            s31 << r44
                            if r44
                              if has_terminal?('\G[0-9]', true, index)
                                r45 = true
                                @index += 1
                              else
                                r45 = nil
                              end
                              s31 << r45
                              if r45
                                i47 = index
                                if has_terminal?('Z', false, index)
                                  r48 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                  @index += 1
                                else
                                  terminal_parse_failure('Z')
                                  r48 = nil
                                end
                                if r48
                                  r47 = r48
                                else
                                  i49, s49 = index, []
                                  if has_terminal?('\G[+-]', true, index)
                                    r50 = true
                                    @index += 1
                                  else
                                    r50 = nil
                                  end
                                  s49 << r50
                                  if r50
                                    s51, i51 = [], index
                                    loop do
                                      if has_terminal?('\G[0-9]', true, index)
                                        r52 = true
                                        @index += 1
                                      else
                                        r52 = nil
                                      end
                                      if r52
                                        s51 << r52
                                      else
                                        break
                                      end
                                      if s51.size == 4
                                        break
                                      end
                                    end
                                    if s51.size < 4
                                      @index = i51
                                      r51 = nil
                                    else
                                      r51 = instantiate_node(SyntaxNode,input, i51...index, s51)
                                    end
                                    s49 << r51
                                  end
                                  if s49.last
                                    r49 = instantiate_node(SyntaxNode,input, i49...index, s49)
                                    r49.extend(VISO8601EXTENDEDDATETIME3)
                                  else
                                    @index = i49
                                    r49 = nil
                                  end
                                  if r49
                                    r47 = r49
                                  else
                                    @index = i47
                                    r47 = nil
                                  end
                                end
                                if r47
                                  r46 = r47
                                else
                                  r46 = instantiate_node(SyntaxNode,input, index...index)
                                end
                                s31 << r46
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s31.last
        r31 = instantiate_node(SyntaxNode,input, i31...index, s31)
        r31.extend(VISO8601EXTENDEDDATETIME4)
      else
        @index = i31
        r31 = nil
      end
      if r31
        r0 = r31
      else
        i53, s53 = index, []
        s54, i54 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r55 = true
            @index += 1
          else
            r55 = nil
          end
          if r55
            s54 << r55
          else
            break
          end
          if s54.size == 4
            break
          end
        end
        if s54.size < 4
          @index = i54
          r54 = nil
        else
          r54 = instantiate_node(SyntaxNode,input, i54...index, s54)
        end
        s53 << r54
        if r54
          if has_terminal?('-', false, index)
            r56 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('-')
            r56 = nil
          end
          s53 << r56
          if r56
            if has_terminal?('\G[0-1]', true, index)
              r57 = true
              @index += 1
            else
              r57 = nil
            end
            s53 << r57
            if r57
              if has_terminal?('\G[0-9]', true, index)
                r58 = true
                @index += 1
              else
                r58 = nil
              end
              s53 << r58
              if r58
                if has_terminal?('-', false, index)
                  r59 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('-')
                  r59 = nil
                end
                s53 << r59
                if r59
                  if has_terminal?('\G[0-3]', true, index)
                    r60 = true
                    @index += 1
                  else
                    r60 = nil
                  end
                  s53 << r60
                  if r60
                    if has_terminal?('\G[0-9]', true, index)
                      r61 = true
                      @index += 1
                    else
                      r61 = nil
                    end
                    s53 << r61
                    if r61
                      if has_terminal?('T', false, index)
                        r62 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure('T')
                        r62 = nil
                      end
                      s53 << r62
                      if r62
                        if has_terminal?('\G[0-2]', true, index)
                          r63 = true
                          @index += 1
                        else
                          r63 = nil
                        end
                        s53 << r63
                        if r63
                          if has_terminal?('\G[0-9]', true, index)
                            r64 = true
                            @index += 1
                          else
                            r64 = nil
                          end
                          s53 << r64
                          if r64
                            i66 = index
                            if has_terminal?('Z', false, index)
                              r67 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure('Z')
                              r67 = nil
                            end
                            if r67
                              r66 = r67
                            else
                              i68, s68 = index, []
                              if has_terminal?('\G[+-]', true, index)
                                r69 = true
                                @index += 1
                              else
                                r69 = nil
                              end
                              s68 << r69
                              if r69
                                s70, i70 = [], index
                                loop do
                                  if has_terminal?('\G[0-9]', true, index)
                                    r71 = true
                                    @index += 1
                                  else
                                    r71 = nil
                                  end
                                  if r71
                                    s70 << r71
                                  else
                                    break
                                  end
                                  if s70.size == 4
                                    break
                                  end
                                end
                                if s70.size < 4
                                  @index = i70
                                  r70 = nil
                                else
                                  r70 = instantiate_node(SyntaxNode,input, i70...index, s70)
                                end
                                s68 << r70
                              end
                              if s68.last
                                r68 = instantiate_node(SyntaxNode,input, i68...index, s68)
                                r68.extend(VISO8601EXTENDEDDATETIME5)
                              else
                                @index = i68
                                r68 = nil
                              end
                              if r68
                                r66 = r68
                              else
                                @index = i66
                                r66 = nil
                              end
                            end
                            if r66
                              r65 = r66
                            else
                              r65 = instantiate_node(SyntaxNode,input, index...index)
                            end
                            s53 << r65
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s53.last
          r53 = instantiate_node(SyntaxNode,input, i53...index, s53)
          r53.extend(VISO8601EXTENDEDDATETIME6)
        else
          @index = i53
          r53 = nil
        end
        if r53
          r0 = r53
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:V_ISO8601_EXTENDED_DATE_TIME][start_index] = r0

    r0
  end

  module VISO8601EXTENDEDTIME0
  end

  module VISO8601EXTENDEDTIME1
  end

  module VISO8601EXTENDEDTIME2
  end

  module VISO8601EXTENDEDTIME3
  end

  module VISO8601EXTENDEDTIME4
  end

  def _nt_V_ISO8601_EXTENDED_TIME
    start_index = index
    if node_cache[:V_ISO8601_EXTENDED_TIME].has_key?(index)
      cached = node_cache[:V_ISO8601_EXTENDED_TIME][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('\G[0-2]', true, index)
      r2 = true
      @index += 1
    else
      r2 = nil
    end
    s1 << r2
    if r2
      if has_terminal?('\G[0-9]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      s1 << r3
      if r3
        if has_terminal?(':', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(':')
          r4 = nil
        end
        s1 << r4
        if r4
          if has_terminal?('\G[0-6]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          s1 << r5
          if r5
            if has_terminal?('\G[0-9]', true, index)
              r6 = true
              @index += 1
            else
              r6 = nil
            end
            s1 << r6
            if r6
              if has_terminal?(':', false, index)
                r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(':')
                r7 = nil
              end
              s1 << r7
              if r7
                if has_terminal?('\G[0-6]', true, index)
                  r8 = true
                  @index += 1
                else
                  r8 = nil
                end
                s1 << r8
                if r8
                  if has_terminal?('\G[0-9]', true, index)
                    r9 = true
                    @index += 1
                  else
                    r9 = nil
                  end
                  s1 << r9
                  if r9
                    i11, s11 = index, []
                    if has_terminal?(',', false, index)
                      r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(',')
                      r12 = nil
                    end
                    s11 << r12
                    if r12
                      s13, i13 = [], index
                      loop do
                        if has_terminal?('\G[0-9]', true, index)
                          r14 = true
                          @index += 1
                        else
                          r14 = nil
                        end
                        if r14
                          s13 << r14
                        else
                          break
                        end
                      end
                      if s13.empty?
                        @index = i13
                        r13 = nil
                      else
                        r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                      end
                      s11 << r13
                    end
                    if s11.last
                      r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                      r11.extend(VISO8601EXTENDEDTIME0)
                    else
                      @index = i11
                      r11 = nil
                    end
                    if r11
                      r10 = r11
                    else
                      r10 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s1 << r10
                    if r10
                      i16 = index
                      r17 = _nt_Z
                      if r17
                        r16 = r17
                      else
                        i18, s18 = index, []
                        if has_terminal?('\G[+-]', true, index)
                          r19 = true
                          @index += 1
                        else
                          r19 = nil
                        end
                        s18 << r19
                        if r19
                          s20, i20 = [], index
                          loop do
                            if has_terminal?('\G[0-9]', true, index)
                              r21 = true
                              @index += 1
                            else
                              r21 = nil
                            end
                            if r21
                              s20 << r21
                            else
                              break
                            end
                            if s20.size == 4
                              break
                            end
                          end
                          if s20.size < 4
                            @index = i20
                            r20 = nil
                          else
                            r20 = instantiate_node(SyntaxNode,input, i20...index, s20)
                          end
                          s18 << r20
                        end
                        if s18.last
                          r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
                          r18.extend(VISO8601EXTENDEDTIME1)
                        else
                          @index = i18
                          r18 = nil
                        end
                        if r18
                          r16 = r18
                        else
                          @index = i16
                          r16 = nil
                        end
                      end
                      if r16
                        r15 = r16
                      else
                        r15 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s1 << r15
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(VISO8601EXTENDEDTIME2)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i22, s22 = index, []
      if has_terminal?('\G[0-2]', true, index)
        r23 = true
        @index += 1
      else
        r23 = nil
      end
      s22 << r23
      if r23
        if has_terminal?('\G[0-9]', true, index)
          r24 = true
          @index += 1
        else
          r24 = nil
        end
        s22 << r24
        if r24
          if has_terminal?(':', false, index)
            r25 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(':')
            r25 = nil
          end
          s22 << r25
          if r25
            if has_terminal?('\G[0-6]', true, index)
              r26 = true
              @index += 1
            else
              r26 = nil
            end
            s22 << r26
            if r26
              if has_terminal?('\G[0-9]', true, index)
                r27 = true
                @index += 1
              else
                r27 = nil
              end
              s22 << r27
              if r27
                i29 = index
                r30 = _nt_Z
                if r30
                  r29 = r30
                else
                  i31, s31 = index, []
                  if has_terminal?('\G[+-]', true, index)
                    r32 = true
                    @index += 1
                  else
                    r32 = nil
                  end
                  s31 << r32
                  if r32
                    s33, i33 = [], index
                    loop do
                      if has_terminal?('\G[0-9]', true, index)
                        r34 = true
                        @index += 1
                      else
                        r34 = nil
                      end
                      if r34
                        s33 << r34
                      else
                        break
                      end
                      if s33.size == 4
                        break
                      end
                    end
                    if s33.size < 4
                      @index = i33
                      r33 = nil
                    else
                      r33 = instantiate_node(SyntaxNode,input, i33...index, s33)
                    end
                    s31 << r33
                  end
                  if s31.last
                    r31 = instantiate_node(SyntaxNode,input, i31...index, s31)
                    r31.extend(VISO8601EXTENDEDTIME3)
                  else
                    @index = i31
                    r31 = nil
                  end
                  if r31
                    r29 = r31
                  else
                    @index = i29
                    r29 = nil
                  end
                end
                if r29
                  r28 = r29
                else
                  r28 = instantiate_node(SyntaxNode,input, index...index)
                end
                s22 << r28
              end
            end
          end
        end
      end
      if s22.last
        r22 = instantiate_node(SyntaxNode,input, i22...index, s22)
        r22.extend(VISO8601EXTENDEDTIME4)
      else
        @index = i22
        r22 = nil
      end
      if r22
        r0 = r22
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:V_ISO8601_EXTENDED_TIME][start_index] = r0

    r0
  end

  module VISO8601EXTENDEDDATE0
  end

  module VISO8601EXTENDEDDATE1
  end

  def _nt_V_ISO8601_EXTENDED_DATE
    start_index = index
    if node_cache[:V_ISO8601_EXTENDED_DATE].has_key?(index)
      cached = node_cache[:V_ISO8601_EXTENDED_DATE][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    s2, i2 = [], index
    loop do
      if has_terminal?('\G[0-9]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        s2 << r3
      else
        break
      end
      if s2.size == 4
        break
      end
    end
    if s2.size < 4
      @index = i2
      r2 = nil
    else
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
    end
    s1 << r2
    if r2
      if has_terminal?('-', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('-')
        r4 = nil
      end
      s1 << r4
      if r4
        if has_terminal?('\G[0-1]', true, index)
          r5 = true
          @index += 1
        else
          r5 = nil
        end
        s1 << r5
        if r5
          if has_terminal?('\G[0-9]', true, index)
            r6 = true
            @index += 1
          else
            r6 = nil
          end
          s1 << r6
          if r6
            if has_terminal?('-', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('-')
              r7 = nil
            end
            s1 << r7
            if r7
              if has_terminal?('\G[0-3]', true, index)
                r8 = true
                @index += 1
              else
                r8 = nil
              end
              s1 << r8
              if r8
                if has_terminal?('\G[0-9]', true, index)
                  r9 = true
                  @index += 1
                else
                  r9 = nil
                end
                s1 << r9
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(VISO8601EXTENDEDDATE0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i10, s10 = index, []
      s11, i11 = [], index
      loop do
        if has_terminal?('\G[0-9]', true, index)
          r12 = true
          @index += 1
        else
          r12 = nil
        end
        if r12
          s11 << r12
        else
          break
        end
        if s11.size == 4
          break
        end
      end
      if s11.size < 4
        @index = i11
        r11 = nil
      else
        r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
      end
      s10 << r11
      if r11
        if has_terminal?('-', false, index)
          r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('-')
          r13 = nil
        end
        s10 << r13
        if r13
          if has_terminal?('\G[0-1]', true, index)
            r14 = true
            @index += 1
          else
            r14 = nil
          end
          s10 << r14
          if r14
            if has_terminal?('\G[0-9]', true, index)
              r15 = true
              @index += 1
            else
              r15 = nil
            end
            s10 << r15
          end
        end
      end
      if s10.last
        r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
        r10.extend(VISO8601EXTENDEDDATE1)
      else
        @index = i10
        r10 = nil
      end
      if r10
        r0 = r10
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:V_ISO8601_EXTENDED_DATE][start_index] = r0

    r0
  end

  module VISO8601DURATION0
  end

  module VISO8601DURATION1
  end

  module VISO8601DURATION2
  end

  module VISO8601DURATION3
  end

  module VISO8601DURATION4
  end

  module VISO8601DURATION5
  end

  module VISO8601DURATION6
  end

  module VISO8601DURATION7
  end

  def _nt_V_ISO8601_DURATION
    start_index = index
    if node_cache[:V_ISO8601_DURATION].has_key?(index)
      cached = node_cache[:V_ISO8601_DURATION][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('P', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('P')
      r1 = nil
    end
    s0 << r1
    if r1
      i3, s3 = index, []
      s4, i4 = [], index
      loop do
        if has_terminal?('\G[0-9]', true, index)
          r5 = true
          @index += 1
        else
          r5 = nil
        end
        if r5
          s4 << r5
        else
          break
        end
      end
      if s4.empty?
        @index = i4
        r4 = nil
      else
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      end
      s3 << r4
      if r4
        if has_terminal?('\G[yY]', true, index)
          r6 = true
          @index += 1
        else
          r6 = nil
        end
        s3 << r6
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(VISO8601DURATION0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        i8, s8 = index, []
        s9, i9 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r10 = true
            @index += 1
          else
            r10 = nil
          end
          if r10
            s9 << r10
          else
            break
          end
        end
        if s9.empty?
          @index = i9
          r9 = nil
        else
          r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
        end
        s8 << r9
        if r9
          if has_terminal?('\G[mM]', true, index)
            r11 = true
            @index += 1
          else
            r11 = nil
          end
          s8 << r11
        end
        if s8.last
          r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
          r8.extend(VISO8601DURATION1)
        else
          @index = i8
          r8 = nil
        end
        if r8
          r7 = r8
        else
          r7 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r7
        if r7
          i13, s13 = index, []
          s14, i14 = [], index
          loop do
            if has_terminal?('\G[0-9]', true, index)
              r15 = true
              @index += 1
            else
              r15 = nil
            end
            if r15
              s14 << r15
            else
              break
            end
          end
          if s14.empty?
            @index = i14
            r14 = nil
          else
            r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
          end
          s13 << r14
          if r14
            if has_terminal?('\G[wW]', true, index)
              r16 = true
              @index += 1
            else
              r16 = nil
            end
            s13 << r16
          end
          if s13.last
            r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
            r13.extend(VISO8601DURATION2)
          else
            @index = i13
            r13 = nil
          end
          if r13
            r12 = r13
          else
            r12 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r12
          if r12
            i18, s18 = index, []
            s19, i19 = [], index
            loop do
              if has_terminal?('\G[0-9]', true, index)
                r20 = true
                @index += 1
              else
                r20 = nil
              end
              if r20
                s19 << r20
              else
                break
              end
            end
            if s19.empty?
              @index = i19
              r19 = nil
            else
              r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
            end
            s18 << r19
            if r19
              if has_terminal?('\G[dD]', true, index)
                r21 = true
                @index += 1
              else
                r21 = nil
              end
              s18 << r21
            end
            if s18.last
              r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
              r18.extend(VISO8601DURATION3)
            else
              @index = i18
              r18 = nil
            end
            if r18
              r17 = r18
            else
              r17 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r17
            if r17
              if has_terminal?('T', false, index)
                r22 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('T')
                r22 = nil
              end
              s0 << r22
              if r22
                i24, s24 = index, []
                s25, i25 = [], index
                loop do
                  if has_terminal?('\G[0-9]', true, index)
                    r26 = true
                    @index += 1
                  else
                    r26 = nil
                  end
                  if r26
                    s25 << r26
                  else
                    break
                  end
                end
                if s25.empty?
                  @index = i25
                  r25 = nil
                else
                  r25 = instantiate_node(SyntaxNode,input, i25...index, s25)
                end
                s24 << r25
                if r25
                  if has_terminal?('\G[hH]', true, index)
                    r27 = true
                    @index += 1
                  else
                    r27 = nil
                  end
                  s24 << r27
                end
                if s24.last
                  r24 = instantiate_node(SyntaxNode,input, i24...index, s24)
                  r24.extend(VISO8601DURATION4)
                else
                  @index = i24
                  r24 = nil
                end
                if r24
                  r23 = r24
                else
                  r23 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r23
                if r23
                  i29, s29 = index, []
                  s30, i30 = [], index
                  loop do
                    if has_terminal?('\G[0-9]', true, index)
                      r31 = true
                      @index += 1
                    else
                      r31 = nil
                    end
                    if r31
                      s30 << r31
                    else
                      break
                    end
                  end
                  if s30.empty?
                    @index = i30
                    r30 = nil
                  else
                    r30 = instantiate_node(SyntaxNode,input, i30...index, s30)
                  end
                  s29 << r30
                  if r30
                    if has_terminal?('\G[mM]', true, index)
                      r32 = true
                      @index += 1
                    else
                      r32 = nil
                    end
                    s29 << r32
                  end
                  if s29.last
                    r29 = instantiate_node(SyntaxNode,input, i29...index, s29)
                    r29.extend(VISO8601DURATION5)
                  else
                    @index = i29
                    r29 = nil
                  end
                  if r29
                    r28 = r29
                  else
                    r28 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r28
                  if r28
                    i34, s34 = index, []
                    s35, i35 = [], index
                    loop do
                      if has_terminal?('\G[0-9]', true, index)
                        r36 = true
                        @index += 1
                      else
                        r36 = nil
                      end
                      if r36
                        s35 << r36
                      else
                        break
                      end
                    end
                    if s35.empty?
                      @index = i35
                      r35 = nil
                    else
                      r35 = instantiate_node(SyntaxNode,input, i35...index, s35)
                    end
                    s34 << r35
                    if r35
                      if has_terminal?('\G[sS]', true, index)
                        r37 = true
                        @index += 1
                      else
                        r37 = nil
                      end
                      s34 << r37
                    end
                    if s34.last
                      r34 = instantiate_node(SyntaxNode,input, i34...index, s34)
                      r34.extend(VISO8601DURATION6)
                    else
                      @index = i34
                      r34 = nil
                    end
                    if r34
                      r33 = r34
                    else
                      r33 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r33
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(VISO8601DURATION7)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:V_ISO8601_DURATION][start_index] = r0

    r0
  end

  module VISO8601DATECONSTRAINTPATTERN0
  end

  def _nt_V_ISO8601_DATE_CONSTRAINT_PATTERN
    start_index = index
    if node_cache[:V_ISO8601_DATE_CONSTRAINT_PATTERN].has_key?(index)
      cached = node_cache[:V_ISO8601_DATE_CONSTRAINT_PATTERN][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[yY]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[yY]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s0 << r2
      if r2
        if has_terminal?('\G[yY]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        s0 << r3
        if r3
          if has_terminal?('\G[yY]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          s0 << r4
          if r4
            if has_terminal?('-', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('-')
              r5 = nil
            end
            s0 << r5
            if r5
              if has_terminal?('\G[mM?X]', true, index)
                r6 = true
                @index += 1
              else
                r6 = nil
              end
              s0 << r6
              if r6
                if has_terminal?('\G[mM?X]', true, index)
                  r7 = true
                  @index += 1
                else
                  r7 = nil
                end
                s0 << r7
                if r7
                  if has_terminal?('-', false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('-')
                    r8 = nil
                  end
                  s0 << r8
                  if r8
                    if has_terminal?('\G[dD?X]', true, index)
                      r9 = true
                      @index += 1
                    else
                      r9 = nil
                    end
                    s0 << r9
                    if r9
                      if has_terminal?('\G[dD?X]', true, index)
                        r10 = true
                        @index += 1
                      else
                        r10 = nil
                      end
                      s0 << r10
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(VISO8601DATECONSTRAINTPATTERN0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:V_ISO8601_DATE_CONSTRAINT_PATTERN][start_index] = r0

    r0
  end

  module VISO8601TIMECONSTRAINTPATTERN0
  end

  def _nt_V_ISO8601_TIME_CONSTRAINT_PATTERN
    start_index = index
    if node_cache[:V_ISO8601_TIME_CONSTRAINT_PATTERN].has_key?(index)
      cached = node_cache[:V_ISO8601_TIME_CONSTRAINT_PATTERN][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[hH]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[hH]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s0 << r2
      if r2
        if has_terminal?(':', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(':')
          r3 = nil
        end
        s0 << r3
        if r3
          if has_terminal?('\G[mM?X]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          s0 << r4
          if r4
            if has_terminal?('\G[mM?X]', true, index)
              r5 = true
              @index += 1
            else
              r5 = nil
            end
            s0 << r5
            if r5
              if has_terminal?(':', false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(':')
                r6 = nil
              end
              s0 << r6
              if r6
                if has_terminal?('\G[sS?X]', true, index)
                  r7 = true
                  @index += 1
                else
                  r7 = nil
                end
                s0 << r7
                if r7
                  if has_terminal?('\G[sS?X]', true, index)
                    r8 = true
                    @index += 1
                  else
                    r8 = nil
                  end
                  s0 << r8
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(VISO8601TIMECONSTRAINTPATTERN0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:V_ISO8601_TIME_CONSTRAINT_PATTERN][start_index] = r0

    r0
  end

  module VISO8601DATETIMECONSTRAINTPATTERN0
  end

  def _nt_V_ISO8601_DATE_TIME_CONSTRAINT_PATTERN
    start_index = index
    if node_cache[:V_ISO8601_DATE_TIME_CONSTRAINT_PATTERN].has_key?(index)
      cached = node_cache[:V_ISO8601_DATE_TIME_CONSTRAINT_PATTERN][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[yY]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[yY]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s0 << r2
      if r2
        if has_terminal?('\G[yY]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        s0 << r3
        if r3
          if has_terminal?('\G[yY]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          s0 << r4
          if r4
            if has_terminal?('-', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('-')
              r5 = nil
            end
            s0 << r5
            if r5
              if has_terminal?('\G[mM?X]', true, index)
                r6 = true
                @index += 1
              else
                r6 = nil
              end
              s0 << r6
              if r6
                if has_terminal?('\G[mM?X]', true, index)
                  r7 = true
                  @index += 1
                else
                  r7 = nil
                end
                s0 << r7
                if r7
                  if has_terminal?('-', false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('-')
                    r8 = nil
                  end
                  s0 << r8
                  if r8
                    if has_terminal?('\G[dD?X]', true, index)
                      r9 = true
                      @index += 1
                    else
                      r9 = nil
                    end
                    s0 << r9
                    if r9
                      if has_terminal?('\G[dD?X]', true, index)
                        r10 = true
                        @index += 1
                      else
                        r10 = nil
                      end
                      s0 << r10
                      if r10
                        if has_terminal?('\G[Tt]', true, index)
                          r11 = true
                          @index += 1
                        else
                          r11 = nil
                        end
                        s0 << r11
                        if r11
                          if has_terminal?('\G[hH?X]', true, index)
                            r12 = true
                            @index += 1
                          else
                            r12 = nil
                          end
                          s0 << r12
                          if r12
                            if has_terminal?('\G[hH?X]', true, index)
                              r13 = true
                              @index += 1
                            else
                              r13 = nil
                            end
                            s0 << r13
                            if r13
                              if has_terminal?(':', false, index)
                                r14 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                @index += 1
                              else
                                terminal_parse_failure(':')
                                r14 = nil
                              end
                              s0 << r14
                              if r14
                                if has_terminal?('\G[mM?X]', true, index)
                                  r15 = true
                                  @index += 1
                                else
                                  r15 = nil
                                end
                                s0 << r15
                                if r15
                                  if has_terminal?('\G[mM?X]', true, index)
                                    r16 = true
                                    @index += 1
                                  else
                                    r16 = nil
                                  end
                                  s0 << r16
                                  if r16
                                    if has_terminal?(':', false, index)
                                      r17 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                      @index += 1
                                    else
                                      terminal_parse_failure(':')
                                      r17 = nil
                                    end
                                    s0 << r17
                                    if r17
                                      if has_terminal?('\G[sS?X]', true, index)
                                        r18 = true
                                        @index += 1
                                      else
                                        r18 = nil
                                      end
                                      s0 << r18
                                      if r18
                                        if has_terminal?('\G[sS?X]', true, index)
                                          r19 = true
                                          @index += 1
                                        else
                                          r19 = nil
                                        end
                                        s0 << r19
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(VISO8601DATETIMECONSTRAINTPATTERN0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:V_ISO8601_DATE_TIME_CONSTRAINT_PATTERN][start_index] = r0

    r0
  end

  module VISO8601DURATIONCONSTRAINTPATTERN0
  end

  module VISO8601DURATIONCONSTRAINTPATTERN1
  end

  def _nt_V_ISO8601_DURATION_CONSTRAINT_PATTERN
    start_index = index
    if node_cache[:V_ISO8601_DURATION_CONSTRAINT_PATTERN].has_key?(index)
      cached = node_cache[:V_ISO8601_DURATION_CONSTRAINT_PATTERN][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('P', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('P')
      r2 = nil
    end
    s1 << r2
    if r2
      if has_terminal?('\G[yY]', true, index)
        r4 = true
        @index += 1
      else
        r4 = nil
      end
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        if has_terminal?('\G[mM]', true, index)
          r6 = true
          @index += 1
        else
          r6 = nil
        end
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r5
        if r5
          if has_terminal?('\G[wW]', true, index)
            r8 = true
            @index += 1
          else
            r8 = nil
          end
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r7
          if r7
            if has_terminal?('\G[dD]', true, index)
              r10 = true
              @index += 1
            else
              r10 = nil
            end
            if r10
              r9 = r10
            else
              r9 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r9
            if r9
              if has_terminal?('T', false, index)
                r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('T')
                r11 = nil
              end
              s1 << r11
              if r11
                if has_terminal?('\G[hH]', true, index)
                  r13 = true
                  @index += 1
                else
                  r13 = nil
                end
                if r13
                  r12 = r13
                else
                  r12 = instantiate_node(SyntaxNode,input, index...index)
                end
                s1 << r12
                if r12
                  if has_terminal?('\G[mM]', true, index)
                    r15 = true
                    @index += 1
                  else
                    r15 = nil
                  end
                  if r15
                    r14 = r15
                  else
                    r14 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s1 << r14
                  if r14
                    if has_terminal?('\G[sS]', true, index)
                      r17 = true
                      @index += 1
                    else
                      r17 = nil
                    end
                    if r17
                      r16 = r17
                    else
                      r16 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s1 << r16
                  end
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(VISO8601DURATIONCONSTRAINTPATTERN0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i18, s18 = index, []
      if has_terminal?('P', false, index)
        r19 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('P')
        r19 = nil
      end
      s18 << r19
      if r19
        if has_terminal?('\G[yY]', true, index)
          r21 = true
          @index += 1
        else
          r21 = nil
        end
        if r21
          r20 = r21
        else
          r20 = instantiate_node(SyntaxNode,input, index...index)
        end
        s18 << r20
        if r20
          if has_terminal?('\G[mM]', true, index)
            r23 = true
            @index += 1
          else
            r23 = nil
          end
          if r23
            r22 = r23
          else
            r22 = instantiate_node(SyntaxNode,input, index...index)
          end
          s18 << r22
          if r22
            if has_terminal?('\G[wW]', true, index)
              r25 = true
              @index += 1
            else
              r25 = nil
            end
            if r25
              r24 = r25
            else
              r24 = instantiate_node(SyntaxNode,input, index...index)
            end
            s18 << r24
            if r24
              if has_terminal?('\G[dD]', true, index)
                r27 = true
                @index += 1
              else
                r27 = nil
              end
              if r27
                r26 = r27
              else
                r26 = instantiate_node(SyntaxNode,input, index...index)
              end
              s18 << r26
            end
          end
        end
      end
      if s18.last
        r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
        r18.extend(VISO8601DURATIONCONSTRAINTPATTERN1)
      else
        @index = i18
        r18 = nil
      end
      if r18
        r0 = r18
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:V_ISO8601_DURATION_CONSTRAINT_PATTERN][start_index] = r0

    r0
  end

  module VTYPEIDENTIFIER0
  end

  def _nt_V_TYPE_IDENTIFIER
    start_index = index
    if node_cache[:V_TYPE_IDENTIFIER].has_key?(index)
      cached = node_cache[:V_TYPE_IDENTIFIER][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[A-Z]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_IDCHAR
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(VTYPEIDENTIFIER0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:V_TYPE_IDENTIFIER][start_index] = r0

    r0
  end

  module VGENERICTYPEIDENTIFIER0
  end

  def _nt_V_GENERIC_TYPE_IDENTIFIER
    start_index = index
    if node_cache[:V_GENERIC_TYPE_IDENTIFIER].has_key?(index)
      cached = node_cache[:V_GENERIC_TYPE_IDENTIFIER][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[A-Z]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_IDCHAR
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?('<', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('<')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            if has_terminal?('\G[a-zA-Z0-9,_<>]', true, index)
              r6 = true
              @index += 1
            else
              r6 = nil
            end
            if r6
              s5 << r6
            else
              break
            end
          end
          if s5.empty?
            @index = i5
            r5 = nil
          else
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          end
          s0 << r5
          if r5
            if has_terminal?('>', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('>')
              r7 = nil
            end
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(VGENERICTYPEIDENTIFIER0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:V_GENERIC_TYPE_IDENTIFIER][start_index] = r0

    r0
  end

  module VATTRIBUTEIDENTIFIER0
  end

  def _nt_V_ATTRIBUTE_IDENTIFIER
    start_index = index
    if node_cache[:V_ATTRIBUTE_IDENTIFIER].has_key?(index)
      cached = node_cache[:V_ATTRIBUTE_IDENTIFIER][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[a-z]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_IDCHAR
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(VATTRIBUTEIDENTIFIER0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:V_ATTRIBUTE_IDENTIFIER][start_index] = r0

    r0
  end

  module VINTEGER0
  end

  module VINTEGER1
  end

  def _nt_V_INTEGER
    start_index = index
    if node_cache[:V_INTEGER].has_key?(index)
      cached = node_cache[:V_INTEGER][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('\G[0-9]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i2, s2 = index, []
      if has_terminal?('\G[1-9]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      s2 << r3
      if r3
        s4, i4 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s2 << r4
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(VINTEGER0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r0 = r2
      else
        i6, s6 = index, []
        s7, i7 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r8 = true
            @index += 1
          else
            r8 = nil
          end
          if r8
            s7 << r8
          else
            break
          end
        end
        if s7.empty?
          @index = i7
          r7 = nil
        else
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        end
        s6 << r7
        if r7
          if has_terminal?('\G[eE]', true, index)
            r9 = true
            @index += 1
          else
            r9 = nil
          end
          s6 << r9
          if r9
            if has_terminal?('\G[+-]', true, index)
              r11 = true
              @index += 1
            else
              r11 = nil
            end
            if r11
              r10 = r11
            else
              r10 = instantiate_node(SyntaxNode,input, index...index)
            end
            s6 << r10
            if r10
              if has_terminal?('\G[0-9]', true, index)
                r12 = true
                @index += 1
              else
                r12 = nil
              end
              s6 << r12
            end
          end
        end
        if s6.last
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          r6.extend(VINTEGER1)
        else
          @index = i6
          r6 = nil
        end
        if r6
          r0 = r6
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:V_INTEGER][start_index] = r0

    r0
  end

  module VREAL0
  end

  module VREAL1
  end

  module VREAL2
  end

  def _nt_V_REAL
    start_index = index
    if node_cache[:V_REAL].has_key?(index)
      cached = node_cache[:V_REAL][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('\G[0-9]', true, index)
      r2 = true
      @index += 1
    else
      r2 = nil
    end
    s1 << r2
    if r2
      if has_terminal?('.', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('.')
        r3 = nil
      end
      s1 << r3
      if r3
        s4, i4 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s1 << r4
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(VREAL0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i6, s6 = index, []
      if has_terminal?('\G[1-9]', true, index)
        r7 = true
        @index += 1
      else
        r7 = nil
      end
      s6 << r7
      if r7
        s8, i8 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r9 = true
            @index += 1
          else
            r9 = nil
          end
          if r9
            s8 << r9
          else
            break
          end
        end
        if s8.empty?
          @index = i8
          r8 = nil
        else
          r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
        end
        s6 << r8
        if r8
          if has_terminal?('.', false, index)
            r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('.')
            r10 = nil
          end
          s6 << r10
          if r10
            s11, i11 = [], index
            loop do
              if has_terminal?('\G[0-9]', true, index)
                r12 = true
                @index += 1
              else
                r12 = nil
              end
              if r12
                s11 << r12
              else
                break
              end
            end
            if s11.empty?
              @index = i11
              r11 = nil
            else
              r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
            end
            s6 << r11
          end
        end
      end
      if s6.last
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
        r6.extend(VREAL1)
      else
        @index = i6
        r6 = nil
      end
      if r6
        r0 = r6
      else
        i13, s13 = index, []
        s14, i14 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r15 = true
            @index += 1
          else
            r15 = nil
          end
          if r15
            s14 << r15
          else
            break
          end
        end
        if s14.empty?
          @index = i14
          r14 = nil
        else
          r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
        end
        s13 << r14
        if r14
          if has_terminal?('.', false, index)
            r16 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('.')
            r16 = nil
          end
          s13 << r16
          if r16
            s17, i17 = [], index
            loop do
              if has_terminal?('\G[0-9]', true, index)
                r18 = true
                @index += 1
              else
                r18 = nil
              end
              if r18
                s17 << r18
              else
                break
              end
            end
            if s17.empty?
              @index = i17
              r17 = nil
            else
              r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
            end
            s13 << r17
            if r17
              if has_terminal?('\G[eE]', true, index)
                r19 = true
                @index += 1
              else
                r19 = nil
              end
              s13 << r19
              if r19
                if has_terminal?('\G[+-]', true, index)
                  r21 = true
                  @index += 1
                else
                  r21 = nil
                end
                if r21
                  r20 = r21
                else
                  r20 = instantiate_node(SyntaxNode,input, index...index)
                end
                s13 << r20
                if r20
                  s22, i22 = [], index
                  loop do
                    if has_terminal?('\G[0-9]', true, index)
                      r23 = true
                      @index += 1
                    else
                      r23 = nil
                    end
                    if r23
                      s22 << r23
                    else
                      break
                    end
                  end
                  if s22.empty?
                    @index = i22
                    r22 = nil
                  else
                    r22 = instantiate_node(SyntaxNode,input, i22...index, s22)
                  end
                  s13 << r22
                end
              end
            end
          end
        end
        if s13.last
          r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
          r13.extend(VREAL2)
        else
          @index = i13
          r13 = nil
        end
        if r13
          r0 = r13
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:V_REAL][start_index] = r0

    r0
  end

  def _nt_V_CHAR
    start_index = index
    if node_cache[:V_CHAR].has_key?(index)
      cached = node_cache[:V_CHAR][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[^\\\\\\n\\"]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:V_CHAR][start_index] = r0

    r0
  end

  module VSTRING0
  end

  module VSTRING1
  end

  def _nt_V_STRING
    start_index = index
    if node_cache[:V_STRING].has_key?(index)
      cached = node_cache[:V_STRING][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('"', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('"')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        i4, s4 = index, []
        i5 = index
        if has_terminal?('"', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r6 = nil
        end
        if r6
          r5 = nil
        else
          @index = i5
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r5
        if r5
          if index < input_length
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r7 = nil
          end
          s4 << r7
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(VSTRING0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          if has_terminal?('\"', false, index)
            r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('\"')
            r8 = nil
          end
          if r8
            r3 = r8
          else
            @index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?('"', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r9 = nil
        end
        s0 << r9
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(VSTRING1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:V_STRING][start_index] = r0

    r0
  end

end

class SharedTokenParser < Treetop::Runtime::CompiledParser
  include SharedToken
end
